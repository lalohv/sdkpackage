/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2015, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */

class org.scn.community.datasource.BYOData extends SdkDataSource {
	/**
	 * Sets data in serialized string form.  Meant to be used in conjunction with
	 * SCN Community Projection data component or another BYO Data component.
	 */
	void setDataString(/*String*/ String dataString){*
		this.data = dataString;
	*}
	/**
	 * Returns serialized string representing data.  Meant to be used with another
	 * SCN Community BYO Data component.
	 */
	String getDataString(){*
		return this.data;
	*}
	/**
	 * Set a mutator for a measure by index (starting at 0)
	 * <example>
	 * Set a mutator to increase the second measures's value by 25%
	 * <code>
	 * DS_1.setMutator(1, 1.25);<br>
	 * </code>
	 * </example>
	 */
	void setMutator(/*Index*/ int index, /*Factor*/ float factor ){*
		var m = eval(this.mutators);
		while(m.length<index){
			m.push(1.0);
		}
		m[index] = factor;
		this.mutators = JSON.stringify(m);
	*}
	/**
	 * Sets title of Headers.
	 * <example>
	 * Set Headers 'Department','Product','Sales','Quantity'.
	 * <code>
	 * DS_1.setHeaders("Department,Product,Sales,Quantity");<br>
	 * </code>
	 * </example> 
	 */
	void setHeaders(/*Header Names*/String s){*
		var d = this.data.split("\n");
		d[0] = s;
		this.data = d.join("\n");
	*}
	/**
	 * Whether to swap axis
	 */
	void setRotateAxis(/*Rotate*/boolean b){*
		this.swap = b;
	*}
	/**
	 * Get if axis is rotated
	 */
	boolean getRotateAxis(){*
		return this.swap;
	*}
	/**
	 * Set number of columns that should be treated as dimensional.  Remaining columns are treated as Measures.
	 */
	void setDimensionCount(/*Number of Columns*/int i){*
		this.kfIndex = i;
	*}
	/**
	 * Gets number of columns that are Dimensions.
	 */
	int getDimensionCount(){*
		return this.kfIndex;
	*}
	/**
	 * Delete all data
	 * <example>
	 * <code>
	 * DS_1.clear();<br>
	 * </code>
	 * </example> 
	 */
	void clear(){*
		var d = this.data.split("\n");
		d.splice(1,d.length-1);
		this.data = d.join("\n");
	*}
	/**
	 * Delete a Row by a given Dimension Key.
	 * <example>
	 * Delete a row with 2 Dimensions Values of 'Grocery' and 'Juice'
	 * <code>
	 * DS_1.deleteRow("Grocery,Juice");<br>
	 * </code>
	 * </example> 
	 */
	void deleteRow(/*Dimensions*/String dimensions){*
		var dims = balanceDimension(dimensions);
		var match = 0;
		var rows = this.data.split("\n");
		while(match>-1){
			match = -1;
			for(var i=0;i<rows.length;i++){
				var row = rows[i].split(",");
				var key = [];
				for(var j=0;j<this.kfIndex;j++){
					key.push(row[j]);
				}
				var hash = key.join(",");
				if(hash==dims) match = i;
			}
			if(match>-1) rows.splice(match,1);
		}
		this.data = rows.join("\n");
	*}
	/**
	 * Balance a Dimension Selection
	 */
	String balanceDimension(/*Dimensions*/String dimensions){*
		var dims = dimensions.split(",");
		while(dims.length>this.kfIndex){
			dims.splice(dims.length-1,1);
		}
		while(dims.length<kfIndex){
			dims.push("#");
		}
		for(var i=0;i<dims.length;i++){
			if(dims[i]=="") dims[i]=="#";
		}
		return dims.join(",");
	*}
	/**
	 * Add or Replace a Row by a given Dimension Key
	 * <example>
	 * Add a row with 2 Dimensions and 2 Measures
	 * <code>
	 * DS_1.addRow("Grocery,Juice", "100,1.25");<br>
	 * </code>
	 * </example> 
	 */
	void addRow(/*Dimensions*/ String dimensions, /*Measures*/ String measures, /*Overwrite*/ optional boolean overwrite){*
		if(overwrite) deleteRow(dimensions);
		var dims = balanceDimension(dimensions).split(",");
		var kfs = measures.split(",");
		var rows = this.data.split("\n");
		var columnCount = 0;
		var newRow = dims.join(",") + "," + kfs.join(",");
		rows.push(newRow);
		var newRows = rows.join("\n");
		this.data = newRows;
	*}
	/**
	 * Removes a Row by a given Dimension Key
	 * It is manipulating the data set from on line basis, the given dimensions must be noted top-down in the resultset
	 * It can be especially used if the result set is containing unique key in first dimension, but it can also be used w/o uniqueness - then the first row will be removed.
	 * <example>
	 * Remove a row with given 2 Dimensions
	 * <code>
	 * DS_1.removeRow("Grocery,Juice");<br>
	 * </code>
	 * </example> 
	 */
	boolean deleteRow(/*Dimensions*/ String dimensions){*
		var rows = this.data.split("\n");
		var foundRow = false;
		for(var rowIndex in rows) {
			var row = rows[rowIndex];
			if(row.indexOf(dimensions + ",") == 0) {
				rows.splice(rowIndex, 1);
				foundRow = true;
				break;
			}
		}
		var newRows = rows.join("\n");
		this.data = newRows;
		return foundRow;
	*}
	/**
	 * Removes multiple Rows by a given Dimension Keys
	 * It is manipulating the data set from on line basis, the given dimensions must be noted top-down in the resultset
	 * <example>
	 * Remove a row with given 1st dimension
	 * <code>
	 * DS_1.removeRow("Grocery");<br>
	 * </code>
	 * </example> 
	 * <example>
	 * Remove a row with given 1st and and dimensions
	 * <code>
	 * DS_1.removeRow("Grocery,Big");<br>
	 * </code>
	 * </example> 
	 */
	int deleteRows(/*Dimensions*/ String dimensions){*
		var rows = this.data.split("\n");
		var foundRows = 0;
		for(var rowIndex = rows.length-1;rowIndex>=0;rowIndex--) {
			var row = rows[rowIndex];
			if(row.indexOf(dimensions + ",") == 0) {
				rows.splice(rowIndex, 1);
				foundRows++;
			}
		}
		var newRows = rows.join("\n");
		this.data = newRows;
		return foundRows;
	*}
}class org.scn.community.datasource.DynCsvDataSource extends SdkDataBuffer {
	// empty
}
/**
 * Generated ZTL Class for ScalingDataSource
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.datasource.ScalingDataSource extends org.scn.community.shared.BufferDataSource {



	/**
	 * Sets Scaling Factor Property
	 */	
	void setScalingFactor( /**Scaling Factor*/ float scalingFactor){*
		this.scalingFactor = scalingFactor;
	*}

	/**
	 * Gets Scaling Factor Property
	 */	
	float getScalingFactor() {*
		return this.scalingFactor;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
/* ZTL END */