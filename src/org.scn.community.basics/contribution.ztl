/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2015, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/org-scn-design-studio-community/sdkpackage/
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Generated ZTL Class for Accordion
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Accordion extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Property
	 */	
	void setDefaultImage( /**Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	ACCORDION.addElement(parentKey [String], key [String], text [String], url [String]);<br>
	ACCORDION.addElement(parentKey [String], key [String], text [String], url [String]);
	</code>
	</example>
	 */
	void addElement (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String], height [int].

 	<example>
	You want to add 2 root elements
	<code>
	ACCORDION.addSection(key [String], text [String], url [String], height [int]);<br>
	ACCORDION.addSection(key [String], text [String], url [String], height [int]);<br>
	<br>
	</code>
	</example>
	 */
	void addSection (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Section Height px (overwrites max)*/optional int height
			) {*		
		
		this.addElement("ROOT", key, 
			text, 
			url, 
			height);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	ACCORDION.removeElement(String key);<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACCORDION.removeSection(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeSection (
			String key
			) {*		
		
		this.removeElement(key);
	*}

	/**
	 * Gets Sections As JSON String
	 */	
	String getSectionsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Sections
	 */	
	String cleanAllSections() {*
		this.elementsContent = "[]";
	*}
	/**
	 * Sets the Text for Section keys<br/>
	 */
	void setSectionTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Section Key<br/>
	 */
	void setSectionText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Section Key<br/>
	 */
	String getSectionText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Section keys<br/>
	 */
	void setSectionUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Section Key<br/>
	 */
	void setSectionUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Section Key<br/>
	 */
	String getSectionUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Height for Section keys<br/>
	 */
	void setSectionHeights (
			/**/ String keys,
			/**/ String separator,
	        /* Height */ int height
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].height = height;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Height for Section Key<br/>
	 */
	void setSectionHeight (
			/**/ String key,
			/**/ int height
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].height = height;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Height for Section Key<br/>
	 */
	int getSectionHeight (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].height;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}


	/**
	 * Gets Expaned Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/**
	 * Sets Size of the Image Property by String
	 */	
	void setImageSizeByString( /**Size of the Image*/ String imageSize){*
		this.imageSize = imageSize;
	*}

	/**
	 * Gets Size of the Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.imageSize;
	*}
	
	/**
	 * Sets Size of the Image Property by Choice Option
	 */	
	void setImageSize( /**Size of the Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.imageSize = imageSize;
	*}
	
	/**
	 * Gets Size of the Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.imageSize;
	*}

	/**
	 * Sets Max Height for Section Property
	 */	
	void setMaxSectionHeight( /**Max Height for Section*/ int maxSectionHeight){*
		this.maxSectionHeight = maxSectionHeight;
	*}

	/**
	 * Gets Max Height for Section Property
	 */	
	int getMaxSectionHeight() {*
		return this.maxSectionHeight;
	*}

	/**
	 * Sets Member Display Property by String
	 */	
	void setMemberDisplayByString( /**Member Display*/ String memberDisplay){*
		this.memberDisplay = memberDisplay;
	*}

	/**
	 * Gets Member Display Property as String
	 */	
	String getMemberDisplayAsString() {*
		return this.memberDisplay;
	*}
	
	/**
	 * Sets Member Display Property by Choice Option
	 */	
	void setMemberDisplay( /**Member Display*/ org_scn_community_shared_MemberDisplayEnumfield memberDisplay){*
		this.memberDisplay = memberDisplay;
	*}
	
	/**
	 * Gets Member Display Property as Choice Option
	 */	
	org_scn_community_shared_MemberDisplayEnumfield getMemberDisplay() {*
		return this.memberDisplay;
	*}



	/**
	 * Sets Selected Key Property.
	 */	
	void setSelectedKey(String key) {*
		this.selectedKey = key;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	Returns the content of property supportedContentNotation as constant
	*/
	org_scn_community_shared_ContentNotationEnumfield getSupportedContentNotation () {*
		return this.supportedContentNotation;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImage( /**Use Images*/ boolean withImage){*
		this.withImage = withImage;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImage() {*
		return this.withImage;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for ActivityViewer
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ActivityViewer extends org.scn.community.shared.Component {

	/**
	 * Sets Text Angle for X Legend Property
	 */	
	void setXLegendAngle( /**Text Angle for X Legend*/ int xLegendAngle){*
		this.XLegendAngle = xLegendAngle;
	*}

	/**
	 * Gets Text Angle for X Legend Property
	 */	
	int getXLegendAngle() {*
		return this.XLegendAngle;
	*}

	/**
	 * Sets Text Angle for Y Legend Property
	 */	
	void setYLegendAngle( /**Text Angle for Y Legend*/ int yLegendAngle){*
		this.YLegendAngle = yLegendAngle;
	*}

	/**
	 * Gets Text Angle for Y Legend Property
	 */	
	int getYLegendAngle() {*
		return this.YLegendAngle;
	*}

	/** Adds a root element containing key [String], text [String], category [String], state [String], startDate [String], endDate [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addActivity(key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	ACTIVITYVIEWER.addActivity(key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addActivity (
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
			};

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeActivity(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeActivity (
			String key
			) {*

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertActivity(index [int], key [String], text [String], category [String], state [String], startDate [String], endDate [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertActivity (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) {*

		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}
		
		var elementsJson = JSON.parse(this.activities);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.activities = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Activity<br/>
	 */
	void updateActivity (
			/**Unique Activity Key*/String key, 
			/**Activity Description*/String text, 
			/**Assigned Category Key*/String category, 
			/**Assigned State Key*/String state, 
			/**Start Date YYYYMMDD*/String startDate, 
			/**End Date YYYYMMDD*/String endDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			category:category, 
			state:state, 
			startDate:startDate, 
			endDate:endDate
		};

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getActivityAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			this.activities = "[]";
		}

		var elementsJson = JSON.parse(this.activities);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Activitys As JSON String
	 */	
	String getActivitysAsJSON() {*
		var jsonObject = JSON.parse(this.activities);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Activitys
	 */	
	String cleanAllActivitys() {*
		this.activities = "[]";
	*}
	
	/**
	 * Sets the Text for Activity keys<br/>
	 */
	void setActivityTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.activities);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Activity Key<br/>
	 */
	void setActivityText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Activity Key<br/>
	 */
	String getActivityText (
			/**/ String key
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Category for Activity keys<br/>
	 */
	void setActivityCategorys (
			/**/ String keys,
			/**/ String separator,
	        /* Category */ String category
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.activities);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].category = category;
					break;
				}
			}
		}
		
		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Category for Activity Key<br/>
	 */
	void setActivityCategory (
			/**/ String key,
			/**/ String category
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].category = category;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Category for Activity Key<br/>
	 */
	String getActivityCategory (
			/**/ String key
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].category;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the State for Activity keys<br/>
	 */
	void setActivityStates (
			/**/ String keys,
			/**/ String separator,
	        /* State */ String state
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.activities);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].state = state;
					break;
				}
			}
		}
		
		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the State for Activity Key<br/>
	 */
	void setActivityState (
			/**/ String key,
			/**/ String state
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].state = state;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of State for Activity Key<br/>
	 */
	String getActivityState (
			/**/ String key
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].state;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the StartDate for Activity keys<br/>
	 */
	void setActivityStartDates (
			/**/ String keys,
			/**/ String separator,
	        /* StartDate */ String startDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.activities);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].startDate = startDate;
					break;
				}
			}
		}
		
		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the StartDate for Activity Key<br/>
	 */
	void setActivityStartDate (
			/**/ String key,
			/**/ String startDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].startDate = startDate;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of StartDate for Activity Key<br/>
	 */
	String getActivityStartDate (
			/**/ String key
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].startDate;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the EndDate for Activity keys<br/>
	 */
	void setActivityEndDates (
			/**/ String keys,
			/**/ String separator,
	        /* EndDate */ String endDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.activities);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].endDate = endDate;
					break;
				}
			}
		}
		
		this.activities = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the EndDate for Activity Key<br/>
	 */
	void setActivityEndDate (
			/**/ String key,
			/**/ String endDate
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].endDate = endDate;
				break;
			}
		}

		this.activities = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of EndDate for Activity Key<br/>
	 */
	String getActivityEndDate (
			/**/ String key
			) 
	{*
		if (this.activities === undefined || this.activities === "" || this.activities === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.activities);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].endDate;
				break;
			}
		}
		
		return value;
	*}



	/** Adds a root element containing key [String], text [String], visible [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addCategory(key [String], text [String], visible [boolean]);<br>
	ACTIVITYVIEWER.addCategory(key [String], text [String], visible [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addCategory (
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
			};

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.categories = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeCategory(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeCategory (
			String key
			) {*

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertCategory(index [int], key [String], text [String], visible [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertCategory (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) {*

		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}
		
		var elementsJson = JSON.parse(this.categories);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.categories = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Category<br/>
	 */
	void updateCategory (
			/**Unique Category Key*/String key, 
			/**Category Description*/String text, 
			/**Visibility*/boolean visible
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible
		};

		var elementsJson = JSON.parse(this.categories);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getCategoryAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var elementsJson = JSON.parse(this.categories);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Categorys As JSON String
	 */	
	String getCategorysAsJSON() {*
		var jsonObject = JSON.parse(this.categories);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Categorys
	 */	
	String cleanAllCategorys() {*
		this.categories = "[]";
	*}
	
	/**
	 * Sets the Text for Category keys<br/>
	 */
	void setCategoryTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.categories);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Category Key<br/>
	 */
	void setCategoryText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.categories);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Category Key<br/>
	 */
	String getCategoryText (
			/**/ String key
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.categories);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Visible for Category keys<br/>
	 */
	void setCategoryVisibles (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.categories);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].visible = true;
					break;
				}
			}
		}
		
		this.categories = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Visible for Category Key<br/>
	 */
	void setCategoryVisible (
			/**/ String key,
			/**/ boolean visible
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.categories);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].visible = visible;
				break;
			}
		}

		this.categories = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Visible of Category keys<br/>
	 */
	void cleanAllCategoryVisibles (
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
		}
		
		this.categories = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Visible for Category Key<br/>
	 */
	String getCategoryVisible (
			/**/ String key
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.categories);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].visible;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Visible keys<br/>
	 */
	org.scn.community.shared.KeyArray getCategoryVisibleKeysArray (
			) 
	{*
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.categories);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].visible == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Clean All Activities from the Array.
	 */	
	void cleanAllActivities (){*
		this.cleanAllActivities = true;

		var elementsArray = [];
		this.activities = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Activities from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllActivities (){*
		this.cleanAllActivities = true;

		var elementsArray = [];
		this.activities = JSON.stringify(elementsArray);
	*}

	/**
	 * Clean All Categories from the Array.
	 */	
	void cleanAllCategories (){*
		this.cleanAllCategories = true;

		var elementsArray = [];
		this.categories = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Categories from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllCategories (){*
		this.cleanAllCategories = true;

		var elementsArray = [];
		this.categories = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Text Angle for Element Property
	 */	
	void setElementTextAngle( /**Text Angle for Element*/ int elementTextAngle){*
		this.elementTextAngle = elementTextAngle;
	*}

	/**
	 * Gets Text Angle for Element Property
	 */	
	int getElementTextAngle() {*
		return this.elementTextAngle;
	*}

	/**
	 * Sets Text Y Position for Element Property
	 */	
	void setElementTextXPos( /**Text Y Position for Element*/ int elementTextXPos){*
		this.elementTextXPos = elementTextXPos;
	*}

	/**
	 * Gets Text Y Position for Element Property
	 */	
	int getElementTextXPos() {*
		return this.elementTextXPos;
	*}

	/**
	 * Sets Text X Position for Element Property
	 */	
	void setElementTextYPos( /**Text X Position for Element*/ int elementTextYPos){*
		this.elementTextYPos = elementTextYPos;
	*}

	/**
	 * Gets Text X Position for Element Property
	 */	
	int getElementTextYPos() {*
		return this.elementTextYPos;
	*}



	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/** Adds a root element containing key [String], style [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIVITYVIEWER.addState(key [String], style [String]);<br>
	ACTIVITYVIEWER.addState(key [String], style [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addState (
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			style:style
			};

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.states = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIVITYVIEWER.removeState(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeState (
			String key
			) {*

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.states = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIVITYVIEWER.insertState(index [int], key [String], style [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertState (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) {*

		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}
		
		var elementsJson = JSON.parse(this.states);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			style:style
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.states = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given State<br/>
	 */
	void updateState (
			/**Unique State Key*/String key, 
			/**State CSS Style*/String style
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			style:style
		};

		var elementsJson = JSON.parse(this.states);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.states = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getStateAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			this.states = "[]";
		}

		var elementsJson = JSON.parse(this.states);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets States As JSON String
	 */	
	String getStatesAsJSON() {*
		var jsonObject = JSON.parse(this.states);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All States
	 */	
	String cleanAllStates() {*
		this.states = "[]";
	*}
	
	/**
	 * Sets the Style for State keys<br/>
	 */
	void setStateStyles (
			/**/ String keys,
			/**/ String separator,
	        /* Style */ String style
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.states);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].style = style;
					break;
				}
			}
		}
		
		this.states = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Style for State Key<br/>
	 */
	void setStateStyle (
			/**/ String key,
			/**/ String style
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.states);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].style = style;
				break;
			}
		}

		this.states = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Style for State Key<br/>
	 */
	String getStateStyle (
			/**/ String key
			) 
	{*
		if (this.states === undefined || this.states === "" || this.states === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.states);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].style;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Time Format in Time Axis Property by String
	 */	
	void setTimeFormatByString( /**Time Format in Time Axis*/ String timeFormat){*
		this.timeFormat = timeFormat;
	*}

	/**
	 * Gets Time Format in Time Axis Property as String
	 */	
	String getTimeFormatAsString() {*
		return this.timeFormat;
	*}
	
	/**
	 * Sets Time Format in Time Axis Property by Choice Option
	 */	
	void setTimeFormat( /**Time Format in Time Axis*/ org_scn_community_shared_Enumfield timeFormat){*
		this.timeFormat = timeFormat;
	*}
	
	/**
	 * Gets Time Format in Time Axis Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getTimeFormat() {*
		return this.timeFormat;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for ActionSheetButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ActionSheetButton extends org.scn.community.shared.Component {

	/**
	 * Sets Type Property by String
	 */	
	void setButtonTypeByString( /**Type*/ String buttonType){*
		this.buttonType = buttonType;
	*}

	/**
	 * Gets Type Property as String
	 */	
	String getButtonTypeAsString() {*
		return this.buttonType;
	*}
	
	/**
	 * Sets Type Property by Choice Option
	 */	
	void setButtonType( /**Type*/ org_scn_community_shared_ButtonTypeEnumfield buttonType){*
		this.buttonType = buttonType;
	*}
	
	/**
	 * Gets Type Property as Choice Option
	 */	
	org_scn_community_shared_ButtonTypeEnumfield getButtonType() {*
		return this.buttonType;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}

	/** Adds a root element containing key [String], text [String], icon [String].

 	<example>
	You want to add 2 root elements
	<code>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	ACTIONSHEETBUTTON.addItem(key [String], text [String], icon [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
			};

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.items = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ACTIONSHEETBUTTON.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ACTIONSHEETBUTTON.insertItem(index [int], key [String], text [String], icon [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertItem (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) {*

		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}
		
		var elementsJson = JSON.parse(this.items);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.items = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Item<br/>
	 */
	void updateItem (
			/**Unique Property Key*/String key, 
			/**Text*/String text, 
			/**Icon*/String icon
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			icon:icon
		};

		var elementsJson = JSON.parse(this.items);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getItemAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			this.items = "[]";
		}

		var elementsJson = JSON.parse(this.items);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Items As JSON String
	 */	
	String getItemsAsJSON() {*
		var jsonObject = JSON.parse(this.items);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Items
	 */	
	String cleanAllItems() {*
		this.items = "[]";
	*}
	
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.items);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.items = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.items);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.items);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Icon for Item keys<br/>
	 */
	void setItemIcons (
			/**/ String keys,
			/**/ String separator,
	        /* Icon */ String icon
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.items);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].icon = icon;
					break;
				}
			}
		}
		
		this.items = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Icon for Item Key<br/>
	 */
	void setItemIcon (
			/**/ String key,
			/**/ String icon
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.items);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].icon = icon;
				break;
			}
		}

		this.items = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Icon for Item Key<br/>
	 */
	String getItemIcon (
			/**/ String key
			) 
	{*
		if (this.items === undefined || this.items === "" || this.items === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.items);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].icon;
				break;
			}
		}
		
		return value;
	*}





	/**
	 * Sets Placement Property by String
	 */	
	void setPlacementByString( /**Placement*/ String placement){*
		this.placement = placement;
	*}

	/**
	 * Gets Placement Property as String
	 */	
	String getPlacementAsString() {*
		return this.placement;
	*}
	
	/**
	 * Sets Placement Property by Choice Option
	 */	
	void setPlacement( /**Placement*/ org_scn_community_shared_PlacementEnumfield placement){*
		this.placement = placement;
	*}
	
	/**
	 * Gets Placement Property as Choice Option
	 */	
	org_scn_community_shared_PlacementEnumfield getPlacement() {*
		return this.placement;
	*}

	/**
	 * Gets Selected Item Property
	 */	
	String getSelectedItem() {*
		return this.selectedItem;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Sets Title Property
	 */	
	void setText( /**Title*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Title Property
	 */	
	String getText() {*
		return this.text;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ApplicationHeader
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ApplicationHeader extends org.scn.community.shared.Component {

	/**
	 * Sets Display Logoff Property
	 */	
	void setDisplayLogoff( /**Display Logoff*/ boolean displayLogoff){*
		this.displayLogoff = displayLogoff;
	*}

	/**
	 * Gets Display Logoff Property
	 */	
	boolean isDisplayLogoff() {*
		return this.displayLogoff;
	*}

	/**
	 * Sets Display Welcome Property
	 */	
	void setDisplayWelcome( /**Display Welcome*/ boolean displayWelcome){*
		this.displayWelcome = displayWelcome;
	*}

	/**
	 * Gets Display Welcome Property
	 */	
	boolean isDisplayWelcome() {*
		return this.displayWelcome;
	*}

	/**
	 * Sets Logo Source Property
	 */	
	void setLogoSrc( /**Logo Source*/ String logoSrc){*
		this.logoSrc = logoSrc;
	*}

	/**
	 * Gets Logo Source Property
	 */	
	String getLogoSrc() {*
		return this.logoSrc;
	*}

	/**
	 * Sets Logo Text Property
	 */	
	void setLogoText( /**Logo Text*/ String logoText){*
		this.logoText = logoText;
	*}

	/**
	 * Gets Logo Text Property
	 */	
	String getLogoText() {*
		return this.logoText;
	*}



	/**
	 * Sets User Name Property
	 */	
	void setUserName( /**User Name*/ String userName){*
		this.userName = userName;
	*}

	/**
	 * Gets User Name Property
	 */	
	String getUserName() {*
		return this.userName;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 *	Class for Arrowed Line
 */

class org.scn.community.basics.ArrowedLine extends org.scn.community.shared.Component {
	
	/* Returns the current color of the line. */
	String getLineColor() {*
		return this.lineColor;
	*}

	/* Sets the current color of the line. */
	void setLineColor(/* New Line Color */ String newLineColor) {*
		this.lineColor = newLineColor;
	*}
	
	/* Returns the current type of the line. */
	String getLineType() {*
		return this.lineType;
	*}

	/* Sets the current type of the line. */
	void setLineType(/* New Line Type */ String newLineType) {*
		this.lineType = newLineType;
	*}
	
	/* Returns the current size of the line. */
	String getLineSize() {*
		return this.lineSize;
	*}

	/* Sets the current size of the line. */
	void setLineSize(/* New Line Size */ int newLineSize) {*
		this.lineSize = newLineSize;
	*}	
	
	/* Returns the current arrow position of the line. */
	String getArrowPos() {*
		return this.arrowPos;
	*}

	/* Sets the current arrow position of the line. */
	void setArrowPos(/* New Arrow Position */ String newArrowPos) {*
		this.arrowPos = newArrowPos;
	*}		
}
class org.scn.community.basics.Base64Image extends org.scn.community.shared.Component {
	/**
	 * Sets Source URL Property
	 */	
	void setSrc( /* Source URL or Base-64 String */ String s){*
		this.src = s;
	*}
	/**
	 * Gets Source URL Property
	 */	
	String getSrc() {*
		return this.src;
	*}
}
/**
 * Generated ZTL Class for BasicBusinessCard
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.BasicBusinessCard extends org.scn.community.shared.Component {

	/**
	 * Sets Image Url Property
	 */	
	void setImage( /**Image Url*/ String image){*
		this.image = image;
	*}

	/**
	 * Gets Image Url Property
	 */	
	String getImage() {*
		return this.image;
	*}

	/**
	 * Sets Name Property
	 */	
	void setName( /**Name*/ String name){*
		this.name = name;
	*}

	/**
	 * Gets Name Property
	 */	
	String getName() {*
		return this.name;
	*}



	/**
	 * Sets Title Property
	 */	
	void setTitle( /**Title*/ String title){*
		this.title = title;
	*}

	/**
	 * Gets Title Property
	 */	
	String getTitle() {*
		return this.title;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Calendar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Calendar extends org.scn.community.shared.Component {

	/**
	 * Sets Current Date Value YYYYMMDD Property
	 */	
	void setCurrentValue( /**Current Date Value YYYYMMDD*/ String currentValue){*
		this.DCurrentValue = currentValue;
	*}

	/**
	 * Gets Current Date Value YYYYMMDD Property
	 */	
	String getCurrentValue() {*
		return this.DCurrentValue;
	*}

	/**
	 * Sets Selection Type Property by String
	 */	
	void setSelectionTypeByString( /**Selection Type*/ String selectionType){*
		this.DSelectionType = selectionType;
	*}

	/**
	 * Gets Selection Type Property as String
	 */	
	String getSelectionTypeAsString() {*
		return this.DSelectionType;
	*}
	
	/**
	 * Sets Selection Type Property by Choice Option
	 */	
	void setSelectionType( /**Selection Type*/ org_scn_community_shared_SelectionTypeEnumfield selectionType){*
		this.DSelectionType = selectionType;
	*}
	
	/**
	 * Gets Selection Type Property as Choice Option
	 */	
	org_scn_community_shared_SelectionTypeEnumfield getSelectionType() {*
		return this.DSelectionType;
	*}

	/**
	 * Sets Date Single Value YYYYMMDD Property
	 */	
	void setValue( /**Date Single Value YYYYMMDD*/ String value){*
		this.DValue = value;
	*}

	/**
	 * Gets Date Single Value YYYYMMDD Property
	 */	
	String getValue() {*
		return this.DValue;
	*}

	/**
	 * Sets Date Value Range From YYYYMMDD Property
	 */	
	void setValueF( /**Date Value Range From YYYYMMDD*/ String valueF){*
		this.DValueF = valueF;
	*}

	/**
	 * Gets Date Value Range From YYYYMMDD Property
	 */	
	String getValueF() {*
		return this.DValueF;
	*}

	/**
	 * Sets Date Value Range To YYYYMMDD Property
	 */	
	void setValueT( /**Date Value Range To YYYYMMDD*/ String valueT){*
		this.DValueT = valueT;
	*}

	/**
	 * Gets Date Value Range To YYYYMMDD Property
	 */	
	String getValueT() {*
		return this.DValueT;
	*}

	/**
	 * Clean All Marked Dates from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.markedDates = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Marked Dates from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.markedDates = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets First Day Offset (0 == Sunday) Property
	 */	
	void setFirstDayOffset( /**First Day Offset (0 == Sunday)*/ int firstDayOffset){*
		this.firstDayOffset = firstDayOffset;
	*}

	/**
	 * Gets First Day Offset (0 == Sunday) Property
	 */	
	int getFirstDayOffset() {*
		return this.firstDayOffset;
	*}

	/** Adds a root element containing key [String], mark [String], inactive [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	CALENDAR.addElement(key [String], mark [String], inactive [boolean]);<br>
	CALENDAR.addElement(key [String], mark [String], inactive [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Date [YYYYMMDD]*/String key, 
			/**Mark*/String mark, 
			/**Incative*/boolean inactive
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			mark:mark, 
			inactive:inactive
			};

		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			this.markedDates = "[]";
		}

		var elementsJson = JSON.parse(this.markedDates);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.markedDates = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	CALENDAR.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			this.markedDates = "[]";
		}

		var elementsJson = JSON.parse(this.markedDates);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.markedDates = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	CALENDAR.insertElement(index [int], key [String], mark [String], inactive [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Date [YYYYMMDD]*/String key, 
			/**Mark*/String mark, 
			/**Incative*/boolean inactive
			) {*

		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			this.markedDates = "[]";
		}
		
		var elementsJson = JSON.parse(this.markedDates);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			mark:mark, 
			inactive:inactive
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.markedDates = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Date [YYYYMMDD]*/String key, 
			/**Mark*/String mark, 
			/**Incative*/boolean inactive
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			this.markedDates = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			mark:mark, 
			inactive:inactive
		};

		var elementsJson = JSON.parse(this.markedDates);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.markedDates = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			this.markedDates = "[]";
		}

		var elementsJson = JSON.parse(this.markedDates);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.markedDates);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.markedDates = "[]";
	*}
	
	/**
	 * Sets the Mark for Element keys<br/>
	 */
	void setElementMarks (
			/**/ String keys,
			/**/ String separator,
	        /* Mark */ String mark
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.markedDates);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].mark = mark;
					break;
				}
			}
		}
		
		this.markedDates = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Mark for Element Key<br/>
	 */
	void setElementMark (
			/**/ String key,
			/**/ String mark
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.markedDates);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].mark = mark;
				break;
			}
		}

		this.markedDates = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Mark for Element Key<br/>
	 */
	String getElementMark (
			/**/ String key
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.markedDates);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].mark;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Inactive for Element keys<br/>
	 */
	void setElementInactives (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.markedDates);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].inactive = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].inactive = true;
					break;
				}
			}
		}
		
		this.markedDates = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Inactive for Element Key<br/>
	 */
	void setElementInactive (
			/**/ String key,
			/**/ boolean inactive
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.markedDates);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].inactive = inactive;
				break;
			}
		}

		this.markedDates = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Inactive of Element keys<br/>
	 */
	void cleanAllElementInactives (
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].inactive = false;
		}
		
		this.markedDates = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Inactive for Element Key<br/>
	 */
	String getElementInactive (
			/**/ String key
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.markedDates);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].inactive;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Inactive keys<br/>
	 */
	org.scn.community.shared.KeyArray getElementInactiveKeysArray (
			) 
	{*
		if (this.markedDates === undefined || this.markedDates === "" || this.markedDates === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.markedDates);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].inactive == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Months Per Row Property
	 */	
	void setMonthsPerRow( /**Months Per Row*/ int monthsPerRow){*
		this.monthsPerRow = monthsPerRow;
	*}

	/**
	 * Gets Months Per Row Property
	 */	
	int getMonthsPerRow() {*
		return this.monthsPerRow;
	*}

	/**
	 * Sets Months To Display Property
	 */	
	void setMonthsToDisplay( /**Months To Display*/ int monthsToDisplay){*
		this.monthsToDisplay = monthsToDisplay;
	*}

	/**
	 * Gets Months To Display Property
	 */	
	int getMonthsToDisplay() {*
		return this.monthsToDisplay;
	*}







	/**
	 * Sets Single Row Property
	 */	
	void setSingleRow( /**Single Row*/ boolean singleRow){*
		this.singleRow = singleRow;
	*}

	/**
	 * Gets Single Row Property
	 */	
	boolean isSingleRow() {*
		return this.singleRow;
	*}

	/**
	 * Sets Weeks Per Row Property
	 */	
	void setWeeksPerRow( /**Weeks Per Row*/ int weeksPerRow){*
		this.weeksPerRow = weeksPerRow;
	*}

	/**
	 * Gets Weeks Per Row Property
	 */	
	int getWeeksPerRow() {*
		return this.weeksPerRow;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for CheckBoxGroup
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.CheckBoxGroup extends org.scn.community.shared.Component {

	/**
	 * Sets Checkbox Width (Horizontal) Property
	 */	
	void setCheckboxWidth( /**Checkbox Width (Horizontal)*/ int checkboxWidth){*
		this.checkboxWidth = checkboxWidth;
	*}

	/**
	 * Gets Checkbox Width (Horizontal) Property
	 */	
	int getCheckboxWidth() {*
		return this.checkboxWidth;
	*}

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], url [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	CHECKBOXGROUP.addElement(key [String], text [String], url [String], selected [boolean]);<br>
	CHECKBOXGROUP.addElement(key [String], text [String], url [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	CHECKBOXGROUP.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	CHECKBOXGROUP.insertElement(index [int], key [String], text [String], url [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url, 
			/**Selected*/boolean selected
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			selected:selected
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.elements = "[]";
	*}
	
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Selected for Element keys<br/>
	 */
	void setElementSelecteds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected for Element Key<br/>
	 */
	void setElementSelected (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected of Element keys<br/>
	 */
	void cleanAllElementSelecteds (
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Selected for Element Key<br/>
	 */
	String getElementSelected (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].selected;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.community.shared.KeyArray getElementSelectedKeysArray (
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Fallback Picture Url Property
	 */	
	void setFallbackPicture( /**Fallback Picture Url*/ String fallbackPicture){*
		this.fallbackPicture = fallbackPicture;
	*}

	/**
	 * Gets Fallback Picture Url Property
	 */	
	String getFallbackPicture() {*
		return this.fallbackPicture;
	*}



	/**
	 * Sets Size Of The Picture Property by String
	 */	
	void setPictureSizeByString( /**Size Of The Picture*/ String pictureSize){*
		this.pictureSize = pictureSize;
	*}

	/**
	 * Gets Size Of The Picture Property as String
	 */	
	String getPictureSizeAsString() {*
		return this.pictureSize;
	*}
	
	/**
	 * Sets Size Of The Picture Property by Choice Option
	 */	
	void setPictureSize( /**Size Of The Picture*/ org_scn_community_shared_ConstImageSizeEnumfield pictureSize){*
		this.pictureSize = pictureSize;
	*}
	
	/**
	 * Gets Size Of The Picture Property as Choice Option
	 */	
	org_scn_community_shared_ConstImageSizeEnumfield getPictureSize() {*
		return this.pictureSize;
	*}

	/**
	 * Sets Layout Property by String
	 */	
	void setSelLayoutByString( /**Layout*/ String selLayout){*
		this.selLayout = selLayout;
	*}

	/**
	 * Gets Layout Property as String
	 */	
	String getSelLayoutAsString() {*
		return this.selLayout;
	*}
	
	/**
	 * Sets Layout Property by Choice Option
	 */	
	void setSelLayout( /**Layout*/ org_scn_community_shared_Enumfield selLayout){*
		this.selLayout = selLayout;
	*}
	
	/**
	 * Gets Layout Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getSelLayout() {*
		return this.selLayout;
	*}

	/**
	 * Sets Use Pictures Property
	 */	
	void setWithPicture( /**Use Pictures*/ boolean withPicture){*
		this.withPicture = withPicture;
	*}

	/**
	 * Gets Use Pictures Property
	 */	
	boolean isWithPicture() {*
		return this.withPicture;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ColorPicker
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ColorPicker extends org.scn.community.shared.Component {

	/**
	 * Sets Color Property
	 */	
	void setColorString( /**Color*/ String colorString){*
		this.colorString = colorString;
	*}

	/**
	 * Gets Color Property
	 */	
	String getColorString() {*
		return this.colorString;
	*}

	/**
	 * Gets Hex Color Property
	 */	
	String getColorStringHex() {*
		return this.colorStringHex;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for DateRangeScroller
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.DateRangeScroller extends org.scn.community.shared.Component {

	/**
	 * Sets Date Property
	 */	
	void setDate( /**Date*/ String date){*
		this.DDate = date;
	*}

	/**
	 * Gets Date Property
	 */	
	String getDate() {*
		return this.DDate;
	*}

	/**
	 * Gets End Date Property
	 */	
	String getEndDate() {*
		return this.DEndDate;
	*}

	/**
	 * Sets Language Dependent Format Property
	 */	
	void setLangFormat( /**Language Dependent Format*/ boolean langFormat){*
		this.DLangFormat = langFormat;
	*}

	/**
	 * Gets Language Dependent Format Property
	 */	
	boolean isLangFormat() {*
		return this.DLangFormat;
	*}

	/**
	 * Sets Custom Pattern Property
	 */	
	void setLangPattern( /**Custom Pattern*/ String langPattern){*
		this.DLangPattern = langPattern;
	*}

	/**
	 * Gets Custom Pattern Property
	 */	
	String getLangPattern() {*
		return this.DLangPattern;
	*}

	/**
	 * Sets Custom Relative Property
	 */	
	void setLangRelative( /**Custom Relative*/ boolean langRelative){*
		this.DLangRelative = langRelative;
	*}

	/**
	 * Gets Custom Relative Property
	 */	
	boolean isLangRelative() {*
		return this.DLangRelative;
	*}

	/**
	 * Sets Custom Style Property by String
	 */	
	void setLangStyleByString( /**Custom Style*/ String langStyle){*
		this.DLangStyle = langStyle;
	*}

	/**
	 * Gets Custom Style Property as String
	 */	
	String getLangStyleAsString() {*
		return this.DLangStyle;
	*}
	
	/**
	 * Sets Custom Style Property by Choice Option
	 */	
	void setLangStyle( /**Custom Style*/ org_scn_community_shared_FormatStyleEnumfield langStyle){*
		this.DLangStyle = langStyle;
	*}
	
	/**
	 * Gets Custom Style Property as Choice Option
	 */	
	org_scn_community_shared_FormatStyleEnumfield getLangStyle() {*
		return this.DLangStyle;
	*}

	/**
	 * Sets Day Of Week To Start Property
	 */	
	void setSpecialDay( /**Day Of Week To Start*/ int specialDay){*
		this.DSpecialDay = specialDay;
	*}

	/**
	 * Gets Day Of Week To Start Property
	 */	
	int getSpecialDay() {*
		return this.DSpecialDay;
	*}

	/**
	 * Sets Duration Of Custom Range Property
	 */	
	void setSpecialDuration( /**Duration Of Custom Range*/ int specialDuration){*
		this.DSpecialDuration = specialDuration;
	*}

	/**
	 * Gets Duration Of Custom Range Property
	 */	
	int getSpecialDuration() {*
		return this.DSpecialDuration;
	*}

	/**
	 * Gets Start Date Property
	 */	
	String getStartDate() {*
		return this.DStartDate;
	*}

	/**
	 * Sets Range View Type Property by String
	 */	
	void setViewTypeByString( /**Range View Type*/ String viewType){*
		this.DViewType = viewType;
	*}

	/**
	 * Gets Range View Type Property as String
	 */	
	String getViewTypeAsString() {*
		return this.DViewType;
	*}
	
	/**
	 * Sets Range View Type Property by Choice Option
	 */	
	void setViewType( /**Range View Type*/ org_scn_community_shared_DateViewTypeEnumfield viewType){*
		this.DViewType = viewType;
	*}
	
	/**
	 * Gets Range View Type Property as Choice Option
	 */	
	org_scn_community_shared_DateViewTypeEnumfield getViewType() {*
		return this.DViewType;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for DateRangeSlider
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.DateRangeSlider extends org.scn.community.shared.Component {

	/**
	 * Sets Granularity Property by String
	 */	
	void setGranularityByString( /**Granularity*/ String granularity){*
		this.DGranularity = granularity;
	*}

	/**
	 * Gets Granularity Property as String
	 */	
	String getGranularityAsString() {*
		return this.DGranularity;
	*}
	
	/**
	 * Sets Granularity Property by Choice Option
	 */	
	void setGranularity( /**Granularity*/ org_scn_community_shared_DateViewTypeEnumfield granularity){*
		this.DGranularity = granularity;
	*}
	
	/**
	 * Gets Granularity Property as Choice Option
	 */	
	org_scn_community_shared_DateViewTypeEnumfield getGranularity() {*
		return this.DGranularity;
	*}

	/**
	 * Sets Language Dependent Format Property
	 */	
	void setLangFormat( /**Language Dependent Format*/ boolean langFormat){*
		this.DLangFormat = langFormat;
	*}

	/**
	 * Gets Language Dependent Format Property
	 */	
	boolean isLangFormat() {*
		return this.DLangFormat;
	*}

	/**
	 * Sets Custom Format Pattern Property
	 */	
	void setLangPattern( /**Custom Format Pattern*/ String langPattern){*
		this.DLangPattern = langPattern;
	*}

	/**
	 * Gets Custom Format Pattern Property
	 */	
	String getLangPattern() {*
		return this.DLangPattern;
	*}

	/**
	 * Sets Custom Format Relative Property
	 */	
	void setLangRelative( /**Custom Format Relative*/ boolean langRelative){*
		this.DLangRelative = langRelative;
	*}

	/**
	 * Gets Custom Format Relative Property
	 */	
	boolean isLangRelative() {*
		return this.DLangRelative;
	*}

	/**
	 * Sets Custom Format Style Property by String
	 */	
	void setLangStyleByString( /**Custom Format Style*/ String langStyle){*
		this.DLangStyle = langStyle;
	*}

	/**
	 * Gets Custom Format Style Property as String
	 */	
	String getLangStyleAsString() {*
		return this.DLangStyle;
	*}
	
	/**
	 * Sets Custom Format Style Property by Choice Option
	 */	
	void setLangStyle( /**Custom Format Style*/ org_scn_community_shared_FormatStyleEnumfield langStyle){*
		this.DLangStyle = langStyle;
	*}
	
	/**
	 * Gets Custom Format Style Property as Choice Option
	 */	
	org_scn_community_shared_FormatStyleEnumfield getLangStyle() {*
		return this.DLangStyle;
	*}

	/**
	 * Sets Maximum Date Property
	 */	
	void setMaximumDate( /**Maximum Date*/ String maximumDate){*
		this.DMax = maximumDate;
	*}

	/**
	 * Gets Maximum Date Property
	 */	
	String getMaximumDate() {*
		return this.DMax;
	*}

	/**
	 * Sets Minimum Date Property
	 */	
	void setMinimumDate( /**Minimum Date*/ String minimumDate){*
		this.DMin = minimumDate;
	*}

	/**
	 * Gets Minimum Date Property
	 */	
	String getMinimumDate() {*
		return this.DMin;
	*}

	/**
	 * Sets First Date Property
	 */	
	void setFirstDate( /**First Date*/ String firstDate){*
		this.DValue = firstDate;
	*}

	/**
	 * Gets First Date Property
	 */	
	String getFirstDate() {*
		return this.DValue;
	*}

	/**
	 * Sets Second Date Property
	 */	
	void setSecondDate( /**Second Date*/ String secondDate){*
		this.DValue2 = secondDate;
	*}

	/**
	 * Gets Second Date Property
	 */	
	String getSecondDate() {*
		return this.DValue2;
	*}



	/**
	 * Sets Show Bubbles Property
	 */	
	void setShowBubbles( /**Show Bubbles*/ boolean showBubbles){*
		this.showBubbles = showBubbles;
	*}

	/**
	 * Gets Show Bubbles Property
	 */	
	boolean isShowBubbles() {*
		return this.showBubbles;
	*}

	/**
	 * Sets Small Step Width Property
	 */	
	void setSmallStepWidth( /**Small Step Width*/ String smallStepWidth){*
		this.smallStepWidth = smallStepWidth;
	*}

	/**
	 * Gets Small Step Width Property
	 */	
	String getSmallStepWidth() {*
		return this.smallStepWidth;
	*}

	/**
	 * Sets Step Labels Property
	 */	
	void setStepLabels( /**Step Labels*/ boolean stepLabels){*
		this.stepLabels = stepLabels;
	*}

	/**
	 * Gets Step Labels Property
	 */	
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/**
	 * Sets Total Units Property
	 */	
	void setTotalUnits( /**Total Units*/ int totalUnits){*
		this.totalUnits = totalUnits;
	*}

	/**
	 * Gets Total Units Property
	 */	
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/**
	 * Sets Change To Vertical Orientation Property
	 */	
	void setVertical( /**Change To Vertical Orientation*/ boolean vertical){*
		this.vertical = vertical;
	*}

	/**
	 * Gets Change To Vertical Orientation Property
	 */	
	boolean isVertical() {*
		return this.vertical;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for DragDropArea
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.DragDropArea extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Url Property
	 */	
	void setDefaultImage( /**Default Image Url*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Url Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Sets Drag Drop Context Property
	 */	
	void setDragContext( /**Drag Drop Context*/ String dragContext){*
		this.dragContext = dragContext;
	*}

	/**
	 * Gets Drag Drop Context Property
	 */	
	String getDragContext() {*
		return this.dragContext;
	*}

	/**
	 * Sets Drag Drop Key Property
	 */	
	void setDragKey( /**Drag Drop Key*/ String dragKey){*
		this.dragKey = dragKey;
	*}

	/**
	 * Gets Drag Drop Key Property
	 */	
	String getDragKey() {*
		return this.dragKey;
	*}

	/**
	 * Gets Technical Proprty For Drop After Key Property
	 */	
	String getDropAfterKey() {*
		return this.dropAfterKey;
	*}

	/**
	 * Gets Drop Context Property
	 */	
	String getDropContext() {*
		return this.dropContext;
	*}

	/**
	 * Gets Drop Id Property
	 */	
	String getDropId() {*
		return this.dropId;
	*}

	/**
	 * Gets Technical Proprty For Drop Index Property
	 */	
	int getDropIndex() {*
		return this.dropIndex;
	*}

	/**
	 * Gets Drop Key Property
	 */	
	String getDropKey() {*
		return this.dropKey;
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	DRAGDROPAREA.addElement(key [String], text [String], url [String]);<br>
	DRAGDROPAREA.addElement(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	DRAGDROPAREA.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	DRAGDROPAREA.insertElement(index [int], key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.elements = "[]";
	*}
	
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Width Of The Item Property
	 */	
	void setItemWidth( /**Width Of The Item*/ int itemWidth){*
		this.itemWidth = itemWidth;
	*}

	/**
	 * Gets Width Of The Item Property
	 */	
	int getItemWidth() {*
		return this.itemWidth;
	*}



	/**
	 * Sets Orientation Property by String
	 */	
	void setOrientationByString( /**Orientation*/ String orientation){*
		this.orientation = orientation;
	*}

	/**
	 * Gets Orientation Property as String
	 */	
	String getOrientationAsString() {*
		return this.orientation;
	*}
	
	/**
	 * Sets Orientation Property by Choice Option
	 */	
	void setOrientation( /**Orientation*/ org_scn_community_shared_OrientationEnumfield orientation){*
		this.orientation = orientation;
	*}
	
	/**
	 * Gets Orientation Property as Choice Option
	 */	
	org_scn_community_shared_OrientationEnumfield getOrientation() {*
		return this.orientation;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Donut
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Donut extends org.scn.community.shared.Component {

	/**
	 * Sets Activate On Out Event Property
	 */	
	void setActivateOnOutEvent( /**Activate On Out Event*/ boolean activateOnOutEvent){*
		this.activateOnOutEvent = activateOnOutEvent;
	*}

	/**
	 * Gets Activate On Out Event Property
	 */	
	boolean isActivateOnOutEvent() {*
		return this.activateOnOutEvent;
	*}

	/**
	 * Sets Activate On Over Event Property
	 */	
	void setActivateOnOverEvent( /**Activate On Over Event*/ boolean activateOnOverEvent){*
		this.activateOnOverEvent = activateOnOverEvent;
	*}

	/**
	 * Gets Activate On Over Event Property
	 */	
	boolean isActivateOnOverEvent() {*
		return this.activateOnOverEvent;
	*}

	/**
	 * Sets Arrow Color Property
	 */	
	void setArrowColor( /**Arrow Color*/ String arrowColor){*
		this.arrowColor = arrowColor;
	*}

	/**
	 * Gets Arrow Color Property
	 */	
	String getArrowColor() {*
		return this.arrowColor;
	*}

	/**
	 * Sets Value Direction Property by String
	 */	
	void setDirectionByString( /**Value Direction*/ String direction){*
		this.direction = direction;
	*}

	/**
	 * Gets Value Direction Property as String
	 */	
	String getDirectionAsString() {*
		return this.direction;
	*}
	
	/**
	 * Sets Value Direction Property by Choice Option
	 */	
	void setDirection( /**Value Direction*/ org_scn_community_shared_Enumfield direction){*
		this.direction = direction;
	*}
	
	/**
	 * Gets Value Direction Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getDirection() {*
		return this.direction;
	*}

	/**
	 * Sets Donut Color Property
	 */	
	void setDonutColor( /**Donut Color*/ String donutColor){*
		this.donutColor = donutColor;
	*}

	/**
	 * Gets Donut Color Property
	 */	
	String getDonutColor() {*
		return this.donutColor;
	*}

	/**
	 * Sets Gap Color Property
	 */	
	void setGapColor( /**Gap Color*/ String gapColor){*
		this.gapColor = gapColor;
	*}

	/**
	 * Gets Gap Color Property
	 */	
	String getGapColor() {*
		return this.gapColor;
	*}

	/**
	 * Sets Current Value As Float Property
	 */	
	void setNumCurVal( /**Current Value As Float*/ String numCurVal){*
		this.numCurVal = numCurVal;
	*}

	/**
	 * Gets Current Value As Float Property
	 */	
	String getNumCurVal() {*
		return this.numCurVal;
	*}

	/**
	 * Sets Previous Value As Float Property
	 */	
	void setNumPrevVal( /**Previous Value As Float*/ String numPrevVal){*
		this.numPrevVal = numPrevVal;
	*}

	/**
	 * Gets Previous Value As Float Property
	 */	
	String getNumPrevVal() {*
		return this.numPrevVal;
	*}








	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for EmbeddedFrame
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.EmbeddedFrame extends org.scn.community.shared.Component {

	/**
	 * Gets Domain Relax Level Property
	 */	
	int getDomainrelaxlevel() {*
		return this.domainrelaxlevel;
	*}

	/**
	 * Gets Explicitly set document domain Property
	 */	
	boolean isExplicitlySetDomain() {*
		return this.explicitlySetDomain;
	*}



	/**
	 * Gets Sandbox Attribute Values Property
	 */	
	String getSandbox() {*
		return this.sandbox;
	*}

	/**
	 * Gets Skip port in domain Property
	 */	
	boolean isSkipport() {*
		return this.skipport;
	*}

	/**
	 * Gets Url Property
	 */	
	String getUrl() {*
		return this.url;
	*}

	/**
	 * Gets Use Sandbox Attribute Property
	 */	
	boolean isUsesandbox() {*
		return this.usesandbox;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions	

	// manual SETTERS
	/**
	 * Sets Domain Relax Level Property
	 */	
	void setDomainrelaxlevel( /**Domain Relax Level*/ int domainrelaxlevel){*
		this.domainrelaxlevel = domainrelaxlevel;
		this.reload = calcTimestamp();
	*}

	/**
	 * Sets Explicitly set document domain Property
	 */	
	void setExplicitlySetDomain( /**Explicitly set document domain*/ boolean explicitlySetDomain){*
		this.explicitlySetDomain = explicitlySetDomain;
		this.reload = calcTimestamp();
	*}

	/**
	 * Sets Sandbox Attribute Values Property
	 */	
	void setSandbox( /**Sandbox Attribute Values*/ String sandbox){*
		this.sandbox = sandbox;
		this.reload = calcTimestamp();
	*}

	/**
	 * Sets Skip port in domain Property
	 */	
	void setSkipport( /**Skip port in domain*/ boolean skipport){*
		this.skipport = skipport;
		this.reload = calcTimestamp();	
	*}

	/**
	 * Sets Url Property
	 */	
	void setUrl( /**Url*/ String url){*
		this.url = url;
		this.reload = calcTimestamp();
	*}

	/**
	 * Sets Use Sandbox Attribute Property
	 */	
	void setUsesandbox( /**Use Sandbox Attribute*/ boolean usesandbox){*
		this.usesandbox = usesandbox;
		this.reload = calcTimestamp();
	*}

	// Special get for BOOLEAN (copy of isSkipPort())
	/**
	 * Gets Skip Port Property
	 */	
	boolean getSkipPort(){*
		return this.skipport;
	*}

	/**
	 * Trigger reload of IFrame
	 */
	void triggerReload(){*
		this.reload = calcTimestamp();
	*}	
	
	@Visibility(private)
	/**
	 *	Workaround for strange DesignStudio lifecycle handling when calling functions via scriptting triggers
	 */
	String calcTimestamp() {*
		return ""+new Date().getTime();
	*}
}

/**
 * Generated ZTL Class for EmbeddedMedia
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.EmbeddedMedia extends org.scn.community.shared.Component {

	/**
	 * Sets Tag Property by String
	 */	
	void setTagByString( /**Tag*/ String tag){*
		this.tag = tag;
	*}

	/**
	 * Gets Tag Property as String
	 */	
	String getTagAsString() {*
		return this.tag;
	*}
	
	/**
	 * Sets Tag Property by Choice Option
	 */	
	void setTag( /**Tag*/ org_scn_community_shared_Enumfield tag){*
		this.tag = tag;
	*}
	
	/**
	 * Gets Tag Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getTag() {*
		return this.tag;
	*}

	/**
	 * Sets Url Property
	 */	
	void setUrl( /**Url*/ String url){*
		this.url = url;
	*}

	/**
	 * Gets Url Property
	 */	
	String getUrl() {*
		return this.url;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}

/**
 * Generated ZTL Class for FloatButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FloatButton extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.DDefaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.DDefaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], image [String], selected [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	FLOATBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);<br>
	FLOATBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);
	</code>
	</example>
	 */
	void addItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Selected*/boolean selected
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			image:image, 
			selected:selected 
			};
	
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], image [String], width [int], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	FLOATBUTTON.addButton(key [String], text [String], image [String], width [int], selected [boolean]);<br>
	FLOATBUTTON.addButton(key [String], text [String], image [String], width [int], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Width*/int width, 
			/**Selected*/boolean selected
			) {*		
		
		
		var itemDef = {
			leaf:false,
			parentKey:"ROOT",
			key:key, 
			text:text, 
			image:image, 
			width:width, 
			selected:selected 
			};
	
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	FLOATBUTTON.removeItem(String key);<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	FLOATBUTTON.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		this.removeItem(key);
	*}

	/**
	 * Gets Buttons As JSON String
	 */	
	String getButtonsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Buttons
	 */	
	String cleanAllButtons() {*
		this.DElementsContent = "[]";
	*}
	/**
	 * Sets the Text for Button keys<br/>
	 */
	void setButtonTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Button Key<br/>
	 */
	void setButtonText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Button Key<br/>
	 */
	String getButtonText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Image for Button keys<br/>
	 */
	void setButtonImages (
			/**/ String keys,
			/**/ String separator,
	        /* Image */ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].image = image;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Image for Button Key<br/>
	 */
	void setButtonImage (
			/**/ String key,
			/**/ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].image = image;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Image for Button Key<br/>
	 */
	String getButtonImage (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].image;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Width for Button keys<br/>
	 */
	void setButtonWidths (
			/**/ String keys,
			/**/ String separator,
	        /* Width */ int width
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].width = width;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Width for Button Key<br/>
	 */
	void setButtonWidth (
			/**/ String key,
			/**/ int width
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].width = width;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Width for Button Key<br/>
	 */
	int getButtonWidth (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].width;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Selected for Button keys<br/>
	 */
	void setButtonSelecteds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected for Button Key<br/>
	 */
	void setButtonSelected (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected of Button keys<br/>
	 */
	void cleanAllButtonSelecteds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Selected for Button Key<br/>
	 */
	String getButtonSelected (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].selected;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.community.shared.KeyArray getButtonSelectedKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Image for Item keys<br/>
	 */
	void setItemImages (
			/**/ String keys,
			/**/ String separator,
	        /* Image */ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].image = image;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Image for Item Key<br/>
	 */
	void setItemImage (
			/**/ String key,
			/**/ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].image = image;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Image for Item Key<br/>
	 */
	String getItemImage (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].image;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Selected for Item keys<br/>
	 */
	void setItemSelecteds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected for Item Key<br/>
	 */
	void setItemSelected (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected of Item keys<br/>
	 */
	void cleanAllItemSelecteds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Selected for Item Key<br/>
	 */
	String getItemSelected (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].selected;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.community.shared.KeyArray getItemSelectedKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Size Of The Image Property by String
	 */	
	void setImageSizeByString( /**Size Of The Image*/ String imageSize){*
		this.DImageSize = imageSize;
	*}

	/**
	 * Gets Size Of The Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.DImageSize;
	*}
	
	/**
	 * Sets Size Of The Image Property by Choice Option
	 */	
	void setImageSize( /**Size Of The Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.DImageSize = imageSize;
	*}
	
	/**
	 * Gets Size Of The Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.DImageSize;
	*}

	/**
	 * Gets Technical Property For Pressed Button Key Property
	 */	
	String getPressedButtonKey() {*
		return this.DPressedButtonKey;
	*}

	/**
	 * Gets Technical Property For Pressed Item Key Property
	 */	
	String getPressedItemKey() {*
		return this.DPressedItemKey;
	*}

	/**
	 * Gets Technical Property For Selected Keys Property
	 */	
	String getSelectedKeys() {*
		return this.DSelectedKeys;
	*}

	/**
	 * Sets Selection Type Property by String
	 */	
	void setSelectionTypeByString( /**Selection Type*/ String selectionType){*
		this.DSelectionType = selectionType;
	*}

	/**
	 * Gets Selection Type Property as String
	 */	
	String getSelectionTypeAsString() {*
		return this.DSelectionType;
	*}
	
	/**
	 * Sets Selection Type Property by Choice Option
	 */	
	void setSelectionType( /**Selection Type*/ org_scn_community_shared_SelectionTypeEnumfield selectionType){*
		this.DSelectionType = selectionType;
	*}
	
	/**
	 * Gets Selection Type Property as Choice Option
	 */	
	org_scn_community_shared_SelectionTypeEnumfield getSelectionType() {*
		return this.DSelectionType;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImages( /**Use Images*/ boolean withImages){*
		this.DWithImages = withImages;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImages() {*
		return this.DWithImages;
	*}








	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for FallbackPicture
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FallbackPicture extends org.scn.community.shared.Component {

	/**
	 * Sets Url For Fallback Picture Property
	 */	
	void setFallbackPicture( /**Url For Fallback Picture*/ String fallbackPicture){*
		this.fallbackPicture = fallbackPicture;
	*}

	/**
	 * Gets Url For Fallback Picture Property
	 */	
	String getFallbackPicture() {*
		return this.fallbackPicture;
	*}

	/**
	 * Sets Url For Picture Property
	 */	
	void setPicture( /**Url For Picture*/ String picture){*
		this.picture = picture;
	*}

	/**
	 * Gets Url For Picture Property
	 */	
	String getPicture() {*
		return this.picture;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
class org.scn.community.basics.FioriAppHeader extends org.scn.community.shared.Component {
	/** Add a header button
 	<example>
	Add a header button called 'Menu' with no label show and a menu icon.
	<code>
	FIORIAPPHEADER_1.addHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType) {*	
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
		}		
		itemConfig = JSON.stringify(o);
	*}
	/** Remove All Buttons
 	<example>
	Remove all button
	<code>
	FIORIAPPHEADER_1.removeAllButtons();<br>
	</code>
	</example>
	 */
	void removeAllButtons () {*		
		itemConfig = JSON.stringify([]);
	*}
	/** Remove All Items in a header button by key
 	<example>
	Remove all items in header button key 'MENU'
	<code>
	FIORIAPPHEADER_1.removeAllItems("MENU");<br>
	</code>
	</example>
	 */
	void removeAllItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfig = JSON.stringify(o);
	*}
	/** Remove a button by key
 	<example>
	Remove a header button called 'MENU'
	<code>
	FIORIAPPHEADER_1.removeHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfig = JSON.stringify(o);
	*}
	/** Add an item to a header button.  Will also add the header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORIBAR_1.addItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfig);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || ""
		});
		itemConfig = JSON.stringify(o);
	*}
	/** Removes an item from a header button.
 	<example>
	Remove an item with key 'HELP' from header button with key 'MENU'
	<code>
	FIORIBAR_1.removeItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfig = JSON.stringify(o);
		}		
	*}
	/**
	Get item key clicked.
	*/
	String getItemClicked() {*
		return this.selectedItem;
	*}
	/**
	Get header key of and item clicked.
	*/
	String getHeaderClicked() {*
		return this.selectedHeader;
	*}
	/**
	Get item text clicked.
	*/
	String getItemTextClicked() {*
		return this.selectedItemText;
	*}
	/**
	Get header text of and item clicked.
	*/
	String getHeaderTextClicked() {*
		return this.selectedHeaderText;
	*}
	/* Shows or hides the back button. */
	void setShowNavButton(/* If true, then the back button is shown, else it is hidden */ boolean visible) {*
		this.showNavButton = visible;
	*}
	/* Returns true if the back button is shown, else false. */
	boolean getShowNavButton() {*
		return this.showNavButton;
	*}
	/* Sets the title. */
	void setTitle(/* Title */ String title) {*
		this.title = title;
	*}	
	/* Returns the title. */
	String getTitle() {*
		return this.title;
	*}
}class org.scn.community.basics.FioriBar extends org.scn.community.shared.Component {
	/** Add a right header button
 	<example>
	Add or update a right header button by key 'MENU'.
	<code>
	FIORIBAR_1.addRightHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addRightHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType, /* Enabled */ optional boolean enabled) {*		
		var o = eval(this.itemConfigRight);
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				enabled : bEnabled,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
			o[matchIndex].enabled = bEnabled;
		}		
		itemConfigRight = JSON.stringify(o);
	*}
	/** Remove All Right Buttons
 	<example>
	Remove all right buttons
	<code>
	FIORIBAR_1.removeAllRightButtons();<br>
	</code>
	</example>
	 */
	void removeAllRightButtons () {*		
		itemConfigRight = JSON.stringify([]);
	*}
	/** Remove All Items in a right header button
 	<example>
	Remove all items in right header button 'MENU'
	<code>
	FIORIBAR_1.removeAllRightItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllRightItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigRight);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfigRight = JSON.stringify(o);
	*}
	/** Remove a right button
 	<example>
	Remove a right header button with key 'MENU'
	<code>
	FIORIBAR_1.removeRightHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeRightHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigRight);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfigRight = JSON.stringify(o);
	*}
	/** Add an item to a right header button.  Will add the right header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORIBAR_1.addRightItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addRightItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon, /* Enabled */ optional boolean enabled ) {*		
		var o = eval(this.itemConfigRight);
		var matchIndex = -1;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;
		
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addRightHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfigRight);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || "",
			enabled : bEnabled
		});
		itemConfigRight = JSON.stringify(o);
	*}
	/** Removes an item from a right header button.
 	<example>
	Remove an item with key 'HELP' from right header button with key 'MENU'
	<code>
	FIORIBAR_1.removeRightItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeRightItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfigRight);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfigRight = JSON.stringify(o);
		}		
	*}
	
	
	
	/** Add a left header button
 	<example>
	Add or update a left header button by key 'MENU'.
	<code>
	FIORIBAR_1.addLeftHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addLeftHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType, /* Enabled */ optional boolean enabled) {*		
		var o = eval(this.itemConfigLeft);
		var matchIndex = -1;
		var sTitle = true;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;
		if(showTitle != undefined) sTitle = showTitle;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				enabled : bEnabled,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
			o[matchIndex].enabled = bEnabled;
		}		
		itemConfigLeft = JSON.stringify(o);
	*}
	/** Remove All Left Buttons
 	<example>
	Remove all left buttons
	<code>
	FIORIBAR_1.removeAllLeftButtons();<br>
	</code>
	</example>
	 */
	void removeAllLeftButtons () {*		
		itemConfigLeft = JSON.stringify([]);
	*}
	/** Remove All Items in a left header button
 	<example>
	Remove all items in left header button 'MENU'
	<code>
	FIORIBAR_1.removeAllLeftItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllLeftItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigLeft);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfigLeft = JSON.stringify(o);
	*}
	/** Remove a left button
 	<example>
	Remove a left header button with key 'MENU'
	<code>
	FIORIBAR_1.removeLeftHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeLeftHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigLeft);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfigLeft = JSON.stringify(o);
	*}
	/** Add an item to a left header button.  Will add the left header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORIBAR_1.addItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addLeftItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon, /* Enabled */ optional boolean enabled ) {*		
		var o = eval(this.itemConfigLeft);
		var matchIndex = -1;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;
		
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addLeftHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfigLeft);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || "",
			enabled : bEnabled
		});
		itemConfigLeft = JSON.stringify(o);
	*}
	/** Removes an item from a left header button.
 	<example>
	Remove an item with key 'HELP' from left header button with key 'MENU'
	<code>
	FIORIBAR_1.removeLeftItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeLeftItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfigLeft);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfigLeft = JSON.stringify(o);
		}		
	*}

	
	/** Add a middle header button
 	<example>
	Add or update a middle header button by key 'MENU'.
	<code>
	FIORIBAR_1.addMiddleHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addMiddleHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType, /* Enabled */ optional boolean enabled) {*		
		var o = eval(this.itemConfigMiddle);
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				enabled : bEnabled,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
			o[matchIndex].enabled = bEnabled;
		}		
		itemConfigMiddle = JSON.stringify(o);
	*}
	/** Remove All Middle Buttons
 	<example>
	Remove all middle buttons
	<code>
	FIORIBAR_1.removeAllMiddleButtons();<br>
	</code>
	</example>
	 */
	void removeAllMiddleButtons () {*		
		itemConfigMiddle = JSON.stringify([]);
	*}
	/** Remove All Items in a middle header button
 	<example>
	Remove all items in middle header button 'MENU'
	<code>
	FIORIBAR_1.removeAllMiddleItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllMiddleItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigMiddle);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfigMiddle = JSON.stringify(o);
	*}
	/** Remove a middle button
 	<example>
	Remove a middle header button with key 'MENU'
	<code>
	FIORIBAR_1.removeMiddleHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeMiddleHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfigMiddle);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfigMiddle = JSON.stringify(o);
	*}
	/** Add an item to a middle header button.  Will add the middle header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORIBAR_1.addItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addMiddleItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon, /* Enabled */ optional boolean enabled ) {*		
		var o = eval(this.itemConfigMiddle);
		var matchIndex = -1;
		var bEnabled = true;
		if(enabled != undefined) bEnabled = enabled;		
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addMiddleHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfigMiddle);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || "",
			enabled : bEnabled
		});
		itemConfigMiddle = JSON.stringify(o);
	*}
	/** Removes an item from a middle header button.
 	<example>
	Remove an item with key 'HELP' from middle header button with key 'MENU'
	<code>
	FIORIBAR_1.removeMiddleItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeMiddleItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfigMiddle);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfigMiddle = JSON.stringify(o);
		}		
	*}

	
	
	
	
	
	
	
	/**
	Get item clicked.
	*/
	String getItemClicked() {*
		return this.selectedItem;
	*}
	/**
	Get item key clicked.
	*/
	String getItemKeyClicked() {*
		return this.selectedItemKey;
	*}
	/**
	Get header of and item clicked.
	*/
	String getHeaderClicked() {*
		return this.selectedHeader;
	*}
	/**
	Get header key of and item clicked.
	*/
	String getHeaderKeyClicked() {*
		return this.selectedHeaderKey;
	*}
	
}
/**
 * Generated ZTL Class for FioriButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FioriButton extends org.scn.community.shared.Component {


















	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Sets Background Colour Property
	 */	
	void setBackColor( /**Background Colour*/ String backColor){*
		this.dBackColor = backColor;
	*}

	/**
	 * Gets Background Colour Property
	 */	
	String getBackColor() {*
		return this.dBackColor;
	*}

	/**
	 * Sets Font Colour Property
	 */	
	void setFontColor( /**Font Colour*/ String fontColor){*
		this.dFontColor = fontColor;
	*}

	/**
	 * Gets Font Colour Property
	 */	
	String getFontColor() {*
		return this.dFontColor;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.dIcon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.dIcon;
	*}

	/**
	 * Sets Size M (16px) | L (22px) Property by String
	 */	
	void setSizeByString( /**Size M (16px) | L (22px)*/ String size){*
		this.dSize = size;
	*}

	/**
	 * Gets Size M (16px) | L (22px) Property as String
	 */	
	String getSizeAsString() {*
		return this.dSize;
	*}
	
	/**
	 * Sets Size M (16px) | L (22px) Property by Choice Option
	 */	
	void setSize( /**Size M (16px) | L (22px)*/ org_scn_community_shared_Enumfield size){*
		this.dSize = size;
	*}
	
	/**
	 * Gets Size M (16px) | L (22px) Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getSize() {*
		return this.dSize;
	*}

	/**
	 * Sets Button Style Property by String
	 */	
	void setStyleByString( /**Button Style*/ String style){*
		this.dStyle = style;
	*}

	/**
	 * Gets Button Style Property as String
	 */	
	String getStyleAsString() {*
		return this.dStyle;
	*}
	
	/**
	 * Sets Button Style Property by Choice Option
	 */	
	void setStyle( /**Button Style*/ org_scn_community_shared_ButtonStyleEnumfield style){*
		this.dStyle = style;
	*}
	
	/**
	 * Gets Button Style Property as Choice Option
	 */	
	org_scn_community_shared_ButtonStyleEnumfield getStyle() {*
		return this.dStyle;
	*}

	/**
	 * Sets Text Property
	 */	
	void setText( /**Text*/ String text){*
		this.dText = text;
	*}

	/**
	 * Gets Text Property
	 */	
	String getText() {*
		return this.dText;
	*}

	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.dTooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.dTooltip;
	*}

}

/**
 * Generated ZTL Class for FioriButtonM
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FioriButtonM extends org.scn.community.shared.Component {


















	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Sets Background Colour Property
	 */	
	void setBackColor( /**Background Colour*/ String backColor){*
		this.dBackColor = backColor;
	*}

	/**
	 * Gets Background Colour Property
	 */	
	String getBackColor() {*
		return this.dBackColor;
	*}

	/**
	 * Sets Font Colour Property
	 */	
	void setFontColor( /**Font Colour*/ String fontColor){*
		this.dFontColor = fontColor;
	*}

	/**
	 * Gets Font Colour Property
	 */	
	String getFontColor() {*
		return this.dFontColor;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.dIcon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.dIcon;
	*}

	/**
	 * Sets Size M (16px) | L (22px) Property by String
	 */	
	void setSizeByString( /**Size M (16px) | L (22px)*/ String size){*
		this.dSize = size;
	*}

	/**
	 * Gets Size M (16px) | L (22px) Property as String
	 */	
	String getSizeAsString() {*
		return this.dSize;
	*}
	
	/**
	 * Sets Size M (16px) | L (22px) Property by Choice Option
	 */	
	void setSize( /**Size M (16px) | L (22px)*/ org_scn_community_shared_Enumfield size){*
		this.dSize = size;
	*}
	
	/**
	 * Gets Size M (16px) | L (22px) Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getSize() {*
		return this.dSize;
	*}

	/**
	 * Sets Button Style Property by String
	 */	
	void setStyleByString( /**Button Style*/ String style){*
		this.dStyle = style;
	*}

	/**
	 * Gets Button Style Property as String
	 */	
	String getStyleAsString() {*
		return this.dStyle;
	*}
	
	/**
	 * Sets Button Style Property by Choice Option
	 */	
	void setStyle( /**Button Style*/ org_scn_community_shared_ButtonStyleEnumfield style){*
		this.dStyle = style;
	*}
	
	/**
	 * Gets Button Style Property as Choice Option
	 */	
	org_scn_community_shared_ButtonStyleEnumfield getStyle() {*
		return this.dStyle;
	*}

	/**
	 * Sets Text Property
	 */	
	void setText( /**Text*/ String text){*
		this.dText = text;
	*}

	/**
	 * Gets Text Property
	 */	
	String getText() {*
		return this.dText;
	*}

	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.dTooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.dTooltip;
	*}

}
class org.scn.community.basics.FioriInput extends org.scn.community.shared.Component {
	
	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ String value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	String getValue() {*
		return this.value;
	*}
}class org.scn.community.basics.FioriSegmentedButton extends org.scn.community.shared.Component {
	/** Add an item
 	<example>
	Add or update a item by key 'A'.
	<code>
	SEGMENTEDBUTTON_1.addItem("MENU","Menu",false,"sap-icon://menu2");<br>
	</code>
	</example>
	 */
	void addItem (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon) {*		
		var o = this.itemConfig || [];
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
		}		
		itemConfig = o;
	*}
	/** Get selected key
 	<example>
	Retrieve key of clicked button item
	<code>
	SEGMENTEDBUTTON_1.getSelectedKey();<br>
	</code>
	</example>
	 */
	String getSelectedKey (){*
		return this.selectedKey;
	*}
	
	/** Set selected key
 	<example>
	Set key of clicked button item
	<code>
	SEGMENTEDBUTTON_1.setSelectedKey("some_key");<br>
	</code>
	</example>
	 */
	String setSelectedKey (String key){*
		this.selectedKey = key;
	*}
	
	/** Set button enabled/disabled
 	<example>
	<code>
	SEGMENTEDBUTTON_1.setEnabled(false);<br>
	</code>
	</example>
	 */
	void setEnabled (boolean enable){*
		this.enabled = enable;
	*}
	
	/** Is button enabled/disabled ?
 	<example>
	<code>
	var enabled = SEGMENTEDBUTTON_1.isEnabled();<br>
	</code>
	</example>
	 */
	boolean isEnabled (){*
		return this.enabled;
	*}
}class org.scn.community.basics.FioriSlider extends org.scn.community.shared.Component {

	/**
	 * Sets Maximum Value Property
	 */	
	void setMax( /**Maximum Value*/ float max){*
		this.max = max;
	*}

	/**
	 * Gets Maximum Value Property
	 */	
	float getMax() {*
		return this.max;
	*}

	/**
	 * Sets Minimum Value Property
	 */	
	void setMin( /**Minimum Value*/ float min){*
		this.min = min;
	*}

	/**
	 * Gets Minimum Value Property
	 */	
	float getMin() {*
		return this.min;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ float value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	float getValue() {*
		return this.value;
	*}

}class org.scn.community.basics.FioriSwitch extends org.scn.community.shared.Component {

	/**
	 * Sets state Property
	 */	
	void setState( /**state*/ boolean state){*
		this.state = state;
	*}

	/**
	 * Gets state Property
	 */	
	boolean getState() {*
		return this.state;
	*}
}class org.scn.community.basics.FioriToolbar extends org.scn.community.shared.Component {
	/** Add a header button
 	<example>
	Add or update a header button by key 'MENU'.
	<code>
	FIORITOOLBAR_1.addHeaderButton("MENU","Menu",false,"sap-icon://menu2","Emphasized");<br>
	</code>
	</example>
	 */
	void addHeaderButton (/*Button Key*/String buttonKey, /*Button Title*/String buttonTitle, /* Show Title */ optional boolean showTitle, /*Icon*/ optional String icon, /*Button Type*/ optional String buttonType) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		var sTitle = true;
		if(showTitle != undefined) sTitle = showTitle;
		var h;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex==-1) {
			o.push({
				key : buttonKey,
				text : buttonTitle,
				showTitle : sTitle,
				icon : icon,
				items : [],
				type : buttonType || "Default"
			});
		}else{	// Don't overwrite items
			o[matchIndex].text = buttonTitle;
			o[matchIndex].showTitle = sTitle;
			o[matchIndex].icon = icon;
			o[matchIndex].type = buttonType || "Default";
		}		
		itemConfig = JSON.stringify(o);
	*}
	/** Remove All Button
 	<example>
	Remove all button
	<code>
	FIORITOOLBAR_1.removeAllButtons();<br>
	</code>
	</example>
	 */
	void removeAllButtons () {*		
		itemConfig = JSON.stringify([]);
	*}
	/** Remove All Items in a header button
 	<example>
	Remove all items in header button 'MENU'
	<code>
	FIORITOOLBAR_1.removeAllItems("Menu");<br>
	</code>
	</example>
	 */
	void removeAllItems (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o[matchIndex].items = [];
		itemConfig = JSON.stringify(o);
	*}
	/** Remove a button
 	<example>
	Remove a header button with key 'MENU'
	<code>
	FIORITOOLBAR_1.removeHeaderButton("MENU");<br>
	</code>
	</example>
	 */
	void removeHeaderButton (/*Button Key*/String buttonKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		itemConfig = JSON.stringify(o);
	*}
	/** Add an item to a header button.  Will add the header button if it does not yet exist.
 	<example>
	Add an item called 'Help' to header button with key 'MENU' with an icon sys-help-2
	<code>
	FIORITOOLBAR_1.addItem("MENU", "help", "Help", "sap-icon://sys-help-2");<br>
	</code>
	</example>
	 */
	void addItem (/*Button Key*/String buttonKey, /*Item Key*/String itemKey, /*Item Text*/String itemText, /*Item Icon*/optional String itemIcon) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex == -1 ){	// Add section for the lazy
			this.addHeaderButton(buttonKey, buttonKey);
			o = eval(this.itemConfig);
			matchIndex = o.length-1;
		}
		o[matchIndex].items.push({
			key : itemKey,
			text : itemText,
			icon : itemIcon || ""
		});
		itemConfig = JSON.stringify(o);
	*}
	/** Removes an item from a header button.
 	<example>
	Remove an item with key 'HELP' from header button with key 'MENU'
	<code>
	FIORITOOLBAR_1.removeItem("MENU", "HELP");<br>
	</code>
	</example>
	 */
	void removeItem (/*Button Key*/String buttonKey, /*Item Key*/ String itemKey) {*		
		var o = eval(this.itemConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].key == buttonKey) matchIndex = i;
		}
		if(matchIndex != -1 ){
			var items = o[matchIndex].items;
			var itemIndex = -1;
			for(var i=0;i<items.length;i++){
				if(items[i].key == itemKey) itemIndex = i;
			}
			if(itemIndex>-1) items.splice(itemIndex,1);
			itemConfig = JSON.stringify(o);
		}		
	*}
	/**
	Get item clicked.
	*/
	String getItemClicked() {*
		return this.selectedItem;
	*}
	/**
	Get item key clicked.
	*/
	String getItemKeyClicked() {*
		return this.selectedItemKey;
	*}
	/**
	Get header of and item clicked.
	*/
	String getHeaderClicked() {*
		return this.selectedHeader;
	*}
	/**
	Get header key of and item clicked.
	*/
	String getHeaderKeyClicked() {*
		return this.selectedHeaderKey;
	*}
	
}
/**
 * Generated ZTL Class for FishEye
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.FishEye extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Url Property
	 */	
	void setDefaultImage( /**Default Image Url*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Url Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	FISHEYE.addElement(key [String], text [String], url [String]);<br>
	FISHEYE.addElement(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	FISHEYE.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	FISHEYE.insertElement(index [int], key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.elements = "[]";
	*}
	
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}





	/**
	 * Sets Orientation Property by String
	 */	
	void setOrientationByString( /**Orientation*/ String orientation){*
		this.orientation = orientation;
	*}

	/**
	 * Gets Orientation Property as String
	 */	
	String getOrientationAsString() {*
		return this.orientation;
	*}
	
	/**
	 * Sets Orientation Property by Choice Option
	 */	
	void setOrientation( /**Orientation*/ org_scn_community_shared_OrientationTypeEnumfield orientation){*
		this.orientation = orientation;
	*}
	
	/**
	 * Gets Orientation Property as Choice Option
	 */	
	org_scn_community_shared_OrientationTypeEnumfield getOrientation() {*
		return this.orientation;
	*}

	/**
	 * Gets Technical Property For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Gauge
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Gauge extends org.scn.community.shared.Component {

	/**
	 * Sets End Value Property
	 */	
	void setEndValue( /**End Value*/ int endValue){*
		this.endValue = endValue;
	*}

	/**
	 * Gets End Value Property
	 */	
	int getEndValue() {*
		return this.endValue;
	*}

	/**
	 * Sets First Colour Property
	 */	
	void setFirstColor( /**First Colour*/ String firstColor){*
		this.firstColor = firstColor;
	*}

	/**
	 * Gets First Colour Property
	 */	
	String getFirstColor() {*
		return this.firstColor;
	*}

	/**
	 * Sets Gradient Colour Property
	 */	
	void setGradientColor( /**Gradient Colour*/ boolean gradientColor){*
		this.gradientColor = gradientColor;
	*}

	/**
	 * Gets Gradient Colour Property
	 */	
	boolean isGradientColor() {*
		return this.gradientColor;
	*}

	/**
	 * Sets Show Number Property
	 */	
	void setHaveNumbers( /**Show Number*/ boolean haveNumbers){*
		this.haveNumbers = haveNumbers;
	*}

	/**
	 * Gets Show Number Property
	 */	
	boolean isHaveNumbers() {*
		return this.haveNumbers;
	*}

	/**
	 * Sets Indicator Value Property
	 */	
	void setIndicatorValue( /**Indicator Value*/ float indicatorValue){*
		this.indicatorValue = indicatorValue;
	*}

	/**
	 * Gets Indicator Value Property
	 */	
	float getIndicatorValue() {*
		return this.indicatorValue;
	*}

	/**
	 * Sets Main Colour Property
	 */	
	void setMainColor( /**Main Colour*/ String mainColor){*
		this.mainColor = mainColor;
	*}

	/**
	 * Gets Main Colour Property
	 */	
	String getMainColor() {*
		return this.mainColor;
	*}

	/**
	 * Sets Needle Colour Property
	 */	
	void setNeedleColor( /**Needle Colour*/ String needleColor){*
		this.needleColor = needleColor;
	*}

	/**
	 * Gets Needle Colour Property
	 */	
	String getNeedleColor() {*
		return this.needleColor;
	*}

	/**
	 * Sets Number Of Big Ticks Property
	 */	
	void setNumOfBigTicks( /**Number Of Big Ticks*/ int numOfBigTicks){*
		this.numOfBigTicks = numOfBigTicks;
	*}

	/**
	 * Gets Number Of Big Ticks Property
	 */	
	int getNumOfBigTicks() {*
		return this.numOfBigTicks;
	*}

	/**
	 * Sets Number Of Small Ticks Property
	 */	
	void setNumOfSmallTicks( /**Number Of Small Ticks*/ int numOfSmallTicks){*
		this.numOfSmallTicks = numOfSmallTicks;
	*}

	/**
	 * Gets Number Of Small Ticks Property
	 */	
	int getNumOfSmallTicks() {*
		return this.numOfSmallTicks;
	*}

	/**
	 * Sets Second Colour Property
	 */	
	void setSecondColor( /**Second Colour*/ String secondColor){*
		this.secondColor = secondColor;
	*}

	/**
	 * Gets Second Colour Property
	 */	
	String getSecondColor() {*
		return this.secondColor;
	*}

	/**
	 * Sets Show Value Property
	 */	
	void setShowValue( /**Show Value*/ boolean showValue){*
		this.showValue = showValue;
	*}

	/**
	 * Gets Show Value Property
	 */	
	boolean isShowValue() {*
		return this.showValue;
	*}

	/**
	 * Sets Showed Value Property
	 */	
	void setShowedValue( /**Showed Value*/ String showedValue){*
		this.showedValue = showedValue;
	*}

	/**
	 * Gets Showed Value Property
	 */	
	String getShowedValue() {*
		return this.showedValue;
	*}

	/**
	 * Sets Start Of Second Colour Property
	 */	
	void setStartSecondColor( /**Start Of Second Colour*/ int startSecondColor){*
		this.startSecondColor = startSecondColor;
	*}

	/**
	 * Gets Start Of Second Colour Property
	 */	
	int getStartSecondColor() {*
		return this.startSecondColor;
	*}

	/**
	 * Sets Start Of Third Colour Property
	 */	
	void setStartThirdColor( /**Start Of Third Colour*/ int startThirdColor){*
		this.startThirdColor = startThirdColor;
	*}

	/**
	 * Gets Start Of Third Colour Property
	 */	
	int getStartThirdColor() {*
		return this.startThirdColor;
	*}

	/**
	 * Sets Start Value Property
	 */	
	void setStartValue( /**Start Value*/ int startValue){*
		this.startValue = startValue;
	*}

	/**
	 * Gets Start Value Property
	 */	
	int getStartValue() {*
		return this.startValue;
	*}

	/**
	 * Sets Third Colour Property
	 */	
	void setThirdColor( /**Third Colour*/ String thirdColor){*
		this.thirdColor = thirdColor;
	*}

	/**
	 * Gets Third Colour Property
	 */	
	String getThirdColor() {*
		return this.thirdColor;
	*}

	/**
	 * Sets Title Property
	 */	
	void setTitle( /**Title*/ String title){*
		this.title = title;
	*}

	/**
	 * Gets Title Property
	 */	
	String getTitle() {*
		return this.title;
	*}

	/**
	 * Sets Text And Ticks Colour Property
	 */	
	void setTtColor( /**Text And Ticks Colour*/ String ttColor){*
		this.ttColor = ttColor;
	*}

	/**
	 * Gets Text And Ticks Colour Property
	 */	
	String getTtColor() {*
		return this.ttColor;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ImageCarousel
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ImageCarousel extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Default Image Url Property
	 */	
	void setDefaultImage( /**Default Image Url*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Default Image Url Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	IMAGECAROUSEL.addElement(key [String], text [String], url [String]);<br>
	IMAGECAROUSEL.addElement(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	IMAGECAROUSEL.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	IMAGECAROUSEL.insertElement(index [int], key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.elements = "[]";
	*}
	
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}





	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for KpiTile
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.KpiTile extends org.scn.community.shared.Component {

	/**
	 * Gets Clicked Component Property
	 */	
	String getClickedComponent() {*
		return this.clickedComponent;
	*}

	/** Adds an element containing parentKey [String], key [String], value [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	KPITILE.addProperty(parentKey [String], key [String], value [String]);<br>
	KPITILE.addProperty(parentKey [String], key [String], value [String]);
	</code>
	</example>
	 */
	void addProperty (
			/**Parent Key*/String parentKey, 
			/**Property Name*/String key, 
			/**Property Value*/String value
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			value:value 
			};
	
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			this.componentsSpec = "[]";
		}
		
		var elementsJson = JSON.parse(this.componentsSpec);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], componentType [String], top [int], bottom [int], left [int], right [int], width [int], height [int], specification [String].

 	<example>
	You want to add 2 root elements
	<code>
	KPITILE.addComponent(key [String], componentType [String], top [int], bottom [int], left [int], right [int], width [int], height [int], specification [String]);<br>
	KPITILE.addComponent(key [String], componentType [String], top [int], bottom [int], left [int], right [int], width [int], height [int], specification [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addComponent (
			/**Unique Key*/String key, 
			/**Component Type*/String componentType, 
			/**Top Position (-1 if bottom margin is set)*/int top, 
			/**Bottom Position*/int bottom, 
			/**Left Position (-1 if right margin is set)*/int left, 
			/**Rigth Position*/int right, 
			/**Width in Px*/int width, 
			/**Height in Px*/int height, 
			/**Full Specification*/String specification
			) {*		
		
		
		var itemDef = {
			leaf:false,
			parentKey:"ROOT",
			key:key, 
			componentType:componentType, 
			top:top, 
			bottom:bottom, 
			left:left, 
			right:right, 
			width:width, 
			height:height, 
			specification:specification 
			};
	
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			this.componentsSpec = "[]";
		}
		
		var elementsJson = JSON.parse(this.componentsSpec);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	KPITILE.removeProperty(String key);<br>
	</code>
	</example>
	 */
	void removeProperty (
			String key
			) {*		
		
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			this.componentsSpec = "[]";
		}
		
		var elementsJson = JSON.parse(this.componentsSpec);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	KPITILE.removeComponent(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeComponent (
			String key
			) {*		
		
		this.removeProperty(key);
	*}

	/**
	 * Gets Components As JSON String
	 */	
	String getComponentsAsJSON() {*
		var jsonObject = JSON.parse(this.componentsSpec);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Components
	 */	
	String cleanAllComponents() {*
		this.componentsSpec = "[]";
	*}
	/**
	 * Sets the ComponentType for Component keys<br/>
	 */
	void setComponentComponentTypes (
			/**/ String keys,
			/**/ String separator,
	        /* ComponentType */ String componentType
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].componentType = componentType;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the ComponentType for Component Key<br/>
	 */
	void setComponentComponentType (
			/**/ String key,
			/**/ String componentType
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].componentType = componentType;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of ComponentType for Component Key<br/>
	 */
	String getComponentComponentType (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].componentType;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Top for Component keys<br/>
	 */
	void setComponentTops (
			/**/ String keys,
			/**/ String separator,
	        /* Top */ int top
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].top = top;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Top for Component Key<br/>
	 */
	void setComponentTop (
			/**/ String key,
			/**/ int top
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].top = top;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Top for Component Key<br/>
	 */
	int getComponentTop (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].top;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Bottom for Component keys<br/>
	 */
	void setComponentBottoms (
			/**/ String keys,
			/**/ String separator,
	        /* Bottom */ int bottom
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].bottom = bottom;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Bottom for Component Key<br/>
	 */
	void setComponentBottom (
			/**/ String key,
			/**/ int bottom
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].bottom = bottom;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Bottom for Component Key<br/>
	 */
	int getComponentBottom (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].bottom;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Left for Component keys<br/>
	 */
	void setComponentLefts (
			/**/ String keys,
			/**/ String separator,
	        /* Left */ int left
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].left = left;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Left for Component Key<br/>
	 */
	void setComponentLeft (
			/**/ String key,
			/**/ int left
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].left = left;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Left for Component Key<br/>
	 */
	int getComponentLeft (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].left;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Right for Component keys<br/>
	 */
	void setComponentRights (
			/**/ String keys,
			/**/ String separator,
	        /* Right */ int right
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].right = right;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Right for Component Key<br/>
	 */
	void setComponentRight (
			/**/ String key,
			/**/ int right
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].right = right;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Right for Component Key<br/>
	 */
	int getComponentRight (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].right;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Width for Component keys<br/>
	 */
	void setComponentWidths (
			/**/ String keys,
			/**/ String separator,
	        /* Width */ int width
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].width = width;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Width for Component Key<br/>
	 */
	void setComponentWidth (
			/**/ String key,
			/**/ int width
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].width = width;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Width for Component Key<br/>
	 */
	int getComponentWidth (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].width;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Height for Component keys<br/>
	 */
	void setComponentHeights (
			/**/ String keys,
			/**/ String separator,
	        /* Height */ int height
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].height = height;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Height for Component Key<br/>
	 */
	void setComponentHeight (
			/**/ String key,
			/**/ int height
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].height = height;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Height for Component Key<br/>
	 */
	int getComponentHeight (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].height;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Specification for Component keys<br/>
	 */
	void setComponentSpecifications (
			/**/ String keys,
			/**/ String separator,
	        /* Specification */ String specification
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].specification = specification;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Specification for Component Key<br/>
	 */
	void setComponentSpecification (
			/**/ String key,
			/**/ String specification
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].specification = specification;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Specification for Component Key<br/>
	 */
	String getComponentSpecification (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].specification;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Value for Property keys<br/>
	 */
	void setPropertyValues (
			/**/ String keys,
			/**/ String separator,
	        /* Value */ String value
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].value = value;
					break;
				}
			}
		}
		
		this.componentsSpec = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Value for Property Key<br/>
	 */
	void setPropertyValue (
			/**/ String key,
			/**/ String value
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].value = value;
				break;
			}
		}

		this.componentsSpec = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Value for Property Key<br/>
	 */
	String getPropertyValue (
			/**/ String key
			) 
	{*
		if (this.componentsSpec === undefined || this.componentsSpec === "" || this.componentsSpec === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.componentsSpec);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].value;
				break;
			}
		}
		
		return value;
	*}








	/**
	 * Gets Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for KpiView
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.KpiView extends org.scn.community.shared.Component {



	/**
	 * Sets Footer CSS Class Property
	 */	
	void setFooterCssClass( /**Footer CSS Class*/ String footerCssClass){*
		this.footerCssClass = footerCssClass;
	*}

	/**
	 * Gets Footer CSS Class Property
	 */	
	String getFooterCssClass() {*
		return this.footerCssClass;
	*}

	/**
	 * Sets Footer Horizontal Alignment Property by String
	 */	
	void setFooterHAlignByString( /**Footer Horizontal Alignment*/ String footerHAlign){*
		this.footerHAlign = footerHAlign;
	*}

	/**
	 * Gets Footer Horizontal Alignment Property as String
	 */	
	String getFooterHAlignAsString() {*
		return this.footerHAlign;
	*}
	
	/**
	 * Sets Footer Horizontal Alignment Property by Choice Option
	 */	
	void setFooterHAlign( /**Footer Horizontal Alignment*/ org_scn_community_shared_HorizontalAlignEnumfield footerHAlign){*
		this.footerHAlign = footerHAlign;
	*}
	
	/**
	 * Gets Footer Horizontal Alignment Property as Choice Option
	 */	
	org_scn_community_shared_HorizontalAlignEnumfield getFooterHAlign() {*
		return this.footerHAlign;
	*}

	/**
	 * Sets Footer Property
	 */	
	void setFooterText( /**Footer*/ String footerText){*
		this.footerText = footerText;
	*}

	/**
	 * Gets Footer Property
	 */	
	String getFooterText() {*
		return this.footerText;
	*}

	/**
	 * Sets Header CSS Class Property
	 */	
	void setHeaderCssClass( /**Header CSS Class*/ String headerCssClass){*
		this.headerCssClass = headerCssClass;
	*}

	/**
	 * Gets Header CSS Class Property
	 */	
	String getHeaderCssClass() {*
		return this.headerCssClass;
	*}

	/**
	 * Sets Header Horizontal Alignment Property by String
	 */	
	void setHeaderHAlignByString( /**Header Horizontal Alignment*/ String headerHAlign){*
		this.headerHAlign = headerHAlign;
	*}

	/**
	 * Gets Header Horizontal Alignment Property as String
	 */	
	String getHeaderHAlignAsString() {*
		return this.headerHAlign;
	*}
	
	/**
	 * Sets Header Horizontal Alignment Property by Choice Option
	 */	
	void setHeaderHAlign( /**Header Horizontal Alignment*/ org_scn_community_shared_HorizontalAlignEnumfield headerHAlign){*
		this.headerHAlign = headerHAlign;
	*}
	
	/**
	 * Gets Header Horizontal Alignment Property as Choice Option
	 */	
	org_scn_community_shared_HorizontalAlignEnumfield getHeaderHAlign() {*
		return this.headerHAlign;
	*}

	/**
	 * Sets Header Property
	 */	
	void setHeaderText( /**Header*/ String headerText){*
		this.headerText = headerText;
	*}

	/**
	 * Gets Header Property
	 */	
	String getHeaderText() {*
		return this.headerText;
	*}

	/**
	 * Sets Url For The Image Property
	 */	
	void setImage( /**Url For The Image*/ String image){*
		this.image = image;
	*}

	/**
	 * Gets Url For The Image Property
	 */	
	String getImage() {*
		return this.image;
	*}

	/**
	 * Sets Size Of The Image Property by String
	 */	
	void setImageSizeByString( /**Size Of The Image*/ String imageSize){*
		this.imageSize = imageSize;
	*}

	/**
	 * Gets Size Of The Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.imageSize;
	*}
	
	/**
	 * Sets Size Of The Image Property by Choice Option
	 */	
	void setImageSize( /**Size Of The Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.imageSize = imageSize;
	*}
	
	/**
	 * Gets Size Of The Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.imageSize;
	*}

	/**
	 * Sets Text For The Link Property
	 */	
	void setLinkText( /**Text For The Link*/ String linkText){*
		this.linkText = linkText;
	*}

	/**
	 * Gets Text For The Link Property
	 */	
	String getLinkText() {*
		return this.linkText;
	*}

	/**
	 * Sets Tooltip For The Link Property
	 */	
	void setLinkTooltip( /**Tooltip For The Link*/ String linkTooltip){*
		this.linkTooltip = linkTooltip;
	*}

	/**
	 * Gets Tooltip For The Link Property
	 */	
	String getLinkTooltip() {*
		return this.linkTooltip;
	*}





	/**
	 * Sets Title CSS Class Property
	 */	
	void setTitleCssClass( /**Title CSS Class*/ String titleCssClass){*
		this.titleCssClass = titleCssClass;
	*}

	/**
	 * Gets Title CSS Class Property
	 */	
	String getTitleCssClass() {*
		return this.titleCssClass;
	*}

	/**
	 * Sets Title Property
	 */	
	void setTitleText( /**Title*/ String titleText){*
		this.titleText = titleText;
	*}

	/**
	 * Gets Title Property
	 */	
	String getTitleText() {*
		return this.titleText;
	*}

	/**
	 * Sets Value CSS Class Property
	 */	
	void setValueCssClass( /**Value CSS Class*/ String valueCssClass){*
		this.valueCssClass = valueCssClass;
	*}

	/**
	 * Gets Value CSS Class Property
	 */	
	String getValueCssClass() {*
		return this.valueCssClass;
	*}

	/**
	 * Sets Value Decimal Places Property by Int
	 */	
	void setValueDecimalPlacesByInt( /**Value Decimal Places*/ int valueDecimalPlaces){*
		this.valueDecimalPlaces = valueDecimalPlaces;
	*}

	/**
	 * Gets Value Decimal Places Property as Int
	 */	
	int getValueDecimalPlacesAsInt() {*
		return this.valueDecimalPlaces;
	*}
	
	/**
	 * Sets Value Decimal Places Property by Choice Option
	 */	
	void setValueDecimalPlaces( /**Value Decimal Places*/ org_scn_community_shared_DecimalPlacesEnumfield valueDecimalPlaces){*
		this.valueDecimalPlaces = parseInt(valueDecimalPlaces.replace("D", ""));
	*}
	
	/**
	 * Gets Value Decimal Places Property as Choice Option
	 */	
	org_scn_community_shared_DecimalPlacesEnumfield getValueDecimalPlaces() {*
		return "D" + this.valueDecimalPlaces;
	*}

	/**
	 * Sets Value As Float Property
	 */	
	void setValueFloat( /**Value As Float*/ String valueFloat){*
		this.valueFloat = valueFloat;
	*}

	/**
	 * Gets Value As Float Property
	 */	
	String getValueFloat() {*
		return this.valueFloat;
	*}

	/**
	 * Sets Value Horizontal Alignment Property by String
	 */	
	void setValueHAlignByString( /**Value Horizontal Alignment*/ String valueHAlign){*
		this.valueHAlign = valueHAlign;
	*}

	/**
	 * Gets Value Horizontal Alignment Property as String
	 */	
	String getValueHAlignAsString() {*
		return this.valueHAlign;
	*}
	
	/**
	 * Sets Value Horizontal Alignment Property by Choice Option
	 */	
	void setValueHAlign( /**Value Horizontal Alignment*/ org_scn_community_shared_HorizontalAlignEnumfield valueHAlign){*
		this.valueHAlign = valueHAlign;
	*}
	
	/**
	 * Gets Value Horizontal Alignment Property as Choice Option
	 */	
	org_scn_community_shared_HorizontalAlignEnumfield getValueHAlign() {*
		return this.valueHAlign;
	*}

	/**
	 * Sets Value Prefix CSS Class Property
	 */	
	void setValuePrefixCssClass( /**Value Prefix CSS Class*/ String valuePrefixCssClass){*
		this.valuePrefixCssClass = valuePrefixCssClass;
	*}

	/**
	 * Gets Value Prefix CSS Class Property
	 */	
	String getValuePrefixCssClass() {*
		return this.valuePrefixCssClass;
	*}

	/**
	 * Sets Value Prefix Property
	 */	
	void setValuePrefixText( /**Value Prefix*/ String valuePrefixText){*
		this.valuePrefixText = valuePrefixText;
	*}

	/**
	 * Gets Value Prefix Property
	 */	
	String getValuePrefixText() {*
		return this.valuePrefixText;
	*}

	/**
	 * Sets Value Suffix CSS Class Property
	 */	
	void setValueSuffixCssClass( /**Value Suffix CSS Class*/ String valueSuffixCssClass){*
		this.valueSuffixCssClass = valueSuffixCssClass;
	*}

	/**
	 * Gets Value Suffix CSS Class Property
	 */	
	String getValueSuffixCssClass() {*
		return this.valueSuffixCssClass;
	*}

	/**
	 * Sets Value Suffix Property
	 */	
	void setValueSuffixText( /**Value Suffix*/ String valueSuffixText){*
		this.valueSuffixText = valueSuffixText;
	*}

	/**
	 * Gets Value Suffix Property
	 */	
	String getValueSuffixText() {*
		return this.valueSuffixText;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValueText( /**Value*/ String valueText){*
		this.valueText = valueText;
	*}

	/**
	 * Gets Value Property
	 */	
	String getValueText() {*
		return this.valueText;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/* Sets the data cell whose value is displayed. */
	void setDataSelection(/* Data cell tha tcontains the value displayed */ ResultCellSelection cellSelection) {*
		this.data = this.stringifySelection(cellSelection);
	*}
}
class org.scn.community.basics.TileProperty {
  String title;
  String info;
  String icon;
  String number;
  String numberUnit;
  String valueState;
}
class org.scn.community.basics.LaunchPad extends org.scn.community.shared.Component {
	/**
	Gets Tile Selected
	*/
	String getTileClicked() {*
		return this.selectedTile;
	*}
	/** Remove All Tiles
 	<example>
	Remove all tiles
	<code>
	LAUNCHPAD_1.removeAllTiles();<br>
	</code>
	</example>
	 */
	void removeAllTiles () {*		
		this.tileConfig = JSON.stringify([]);
	*}
	
	org.scn.community.basics.TileProperty getTileProperty(/*Title*/String title){*
		var r = {
			title : "",
			info : "",
			icon : "",
			number : "",
			numberUnit : "",
			valueState : "",
			styleClass : ""
		}
		var o = eval(this.tileConfig);
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1){
			var tileConf = o[matchIndex];
			r.title = tileConf.title;
			r.info = tileConf.info;
			r.icon = tileConf.icon;
			r.number = tileConf.number;
			r.numberUnit = tileConf.numberUnit;
			r.valueState = tileConf.valueState;
			r.styleClass = tileConf.styleClass;
		}
		return r;
	*}
	
	/** Adds or Updates a Tile (if title already exists)
 	<example>
	Add/Update a tile called "Sales"
	<code>
	LAUNCHPAD_1.addTile("Sales", "YTD", "sap-icon://money-bills", "1234", "USD", "good");<br>
	</code>
	</example>
	 */
	void addTile (/*Title*/String title, 
			/*Info*/optional String info, 
			/*Icon*/optional String icon, 
			/*Number*/optional String number, 
			/*Number Unit*/optional String numberUnit,
			/*Value State*/optional String valueState,
			/*CSS Class*/optional String styleClass) {*		
		var o = eval(this.tileConfig);
		if(!o) o = [];
		var tile = {
			title: title,
			info: info,
			icon: icon,
			number: number,
			numberUnit: numberUnit,
			valueState : valueState || "None",
			styleClass : styleClass
		};	
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex==-1){	// New Tile
			o.push(tile);
		}else{	// Update Tile
			o[matchIndex] = tile;
		}
		tileConfig = JSON.stringify(o);
	*}
	/** Remove a tile
 	<example>
	Remove a tile titled "Sales"
	<code>
	LAUNCHPAD_1.removeTile("Sales");<br>
	</code>
	</example>
	 */
	void removeTile (/*Tile Title*/String title) {*		
		var o = eval(this.tileConfig);
		if(!o) o = [];
		var matchIndex = -1;
		for(var i=0;i<o.length;i++){
			if(o[i].title == title) matchIndex = i;
		}
		if(matchIndex>-1) o.splice(matchIndex,1);
		tileConfig = JSON.stringify(o);
	*}
}

/**
 * Generated ZTL Class for LeaderBoard
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.LeaderBoard extends org.scn.community.shared.Component {

	/**
	 * Sets Add Counter Property
	 */	
	void setAddCounter( /**Add Counter*/ boolean addCounter){*
		this.addCounter = addCounter;
	*}

	/**
	 * Gets Add Counter Property
	 */	
	boolean isAddCounter() {*
		return this.addCounter;
	*}

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elements = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], url [String], value [float], valueS [String].

 	<example>
	You want to add 2 root elements
	<code>
	LEADERBOARD.addElement(key [String], text [String], url [String], value [float], valueS [String]);<br>
	LEADERBOARD.addElement(key [String], text [String], url [String], value [float], valueS [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/String url, 
			/**Value*/float value, 
			/**Value as String*/String valueS
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			value:value, 
			valueS:valueS
			};

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	LEADERBOARD.removeElement(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeElement (
			String key
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	LEADERBOARD.insertElement(index [int], key [String], text [String], url [String], value [float], valueS [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertElement (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/String url, 
			/**Value*/float value, 
			/**Value as String*/String valueS
			) {*

		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			value:value, 
			valueS:valueS
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Element<br/>
	 */
	void updateElement (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/String url, 
			/**Value*/float value, 
			/**Value as String*/String valueS
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			value:value, 
			valueS:valueS
		};

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getElementAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}

		var elementsJson = JSON.parse(this.elements);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Elements As JSON String
	 */	
	String getElementsAsJSON() {*
		var jsonObject = JSON.parse(this.elements);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Elements
	 */	
	String cleanAllElements() {*
		this.elements = "[]";
	*}
	
	/**
	 * Sets the Text for Element keys<br/>
	 */
	void setElementTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Element Key<br/>
	 */
	void setElementText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Element Key<br/>
	 */
	String getElementText (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Element keys<br/>
	 */
	void setElementUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Element Key<br/>
	 */
	void setElementUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Element Key<br/>
	 */
	String getElementUrl (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Value for Element keys<br/>
	 */
	void setElementValues (
			/**/ String keys,
			/**/ String separator,
	        /* Value */ float value
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].value = value;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Value for Element Key<br/>
	 */
	void setElementValue (
			/**/ String key,
			/**/ float value
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].value = value;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Value for Element Key<br/>
	 */
	float getElementValue (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].value;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the ValueS for Element keys<br/>
	 */
	void setElementValueSs (
			/**/ String keys,
			/**/ String separator,
	        /* ValueS */ String valueS
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elements);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].valueS = valueS;
					break;
				}
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the ValueS for Element Key<br/>
	 */
	void setElementValueS (
			/**/ String key,
			/**/ String valueS
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].valueS = valueS;
				break;
			}
		}

		this.elements = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of ValueS for Element Key<br/>
	 */
	String getElementValueS (
			/**/ String key
			) 
	{*
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elements);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].valueS;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Fallback Picture Url Property
	 */	
	void setFallbackPicture( /**Fallback Picture Url*/ String fallbackPicture){*
		this.fallbackPicture = fallbackPicture;
	*}

	/**
	 * Gets Fallback Picture Url Property
	 */	
	String getFallbackPicture() {*
		return this.fallbackPicture;
	*}





	/**
	 * Gets Technical Proprty For Pressed Key Property
	 */	
	String getPressedKey() {*
		return this.pressedKey;
	*}

	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Sets Value Prefix Text Property
	 */	
	void setValuePrefix( /**Value Prefix Text*/ String valuePrefix){*
		this.valuePrefix = valuePrefix;
	*}

	/**
	 * Gets Value Prefix Text Property
	 */	
	String getValuePrefix() {*
		return this.valuePrefix;
	*}

	/**
	 * Sets Value Suffix Text Property
	 */	
	void setValueSuffix( /**Value Suffix Text*/ String valueSuffix){*
		this.valueSuffix = valueSuffix;
	*}

	/**
	 * Gets Value Suffix Text Property
	 */	
	String getValueSuffix() {*
		return this.valueSuffix;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Link
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Link extends org.scn.community.shared.Component {



	/**
	 * Sets Link Text Property
	 */	
	void setText( /**Link Text*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Link Text Property
	 */	
	String getText() {*
		return this.text;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ListSelector
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ListSelector extends org.scn.community.shared.Component {

	/**
	 * Clean All Titles from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.titles = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Titles from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.titles = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Fixed Width (-1 For Auto) Property
	 */	
	void setFixedWidth( /**Fixed Width (-1 For Auto)*/ int fixedWidth){*
		this.fixedWidth = fixedWidth;
	*}

	/**
	 * Gets Fixed Width (-1 For Auto) Property
	 */	
	int getFixedWidth() {*
		return this.fixedWidth;
	*}

	/**
	 * Sets Icon Height (px) Property
	 */	
	void setIconHeight( /**Icon Height (px)*/ int iconHeight){*
		this.iconHeight = iconHeight;
	*}

	/**
	 * Gets Icon Height (px) Property
	 */	
	int getIconHeight() {*
		return this.iconHeight;
	*}

	/**
	 * Sets Icon Width (px) Property
	 */	
	void setIconWidth( /**Icon Width (px)*/ int iconWidth){*
		this.iconWidth = iconWidth;
	*}

	/**
	 * Gets Icon Width (px) Property
	 */	
	int getIconWidth() {*
		return this.iconWidth;
	*}

	/**
	 * Gets Selected Key Property
	 */	
	String getKeyClicked() {*
		return this.keyClicked;
	*}

	/**
	 * Gets Selected Label Property
	 */	
	String getLabelClicked() {*
		return this.labelClicked;
	*}

	/**
	 * Sets Label Orientation Property by String
	 */	
	void setLabelOrientationByString( /**Label Orientation*/ String labelOrientation){*
		this.labelOrientation = labelOrientation;
	*}

	/**
	 * Gets Label Orientation Property as String
	 */	
	String getLabelOrientationAsString() {*
		return this.labelOrientation;
	*}
	
	/**
	 * Sets Label Orientation Property by Choice Option
	 */	
	void setLabelOrientation( /**Label Orientation*/ org_scn_community_shared_OrientationEnumfield labelOrientation){*
		this.labelOrientation = labelOrientation;
	*}
	
	/**
	 * Gets Label Orientation Property as Choice Option
	 */	
	org_scn_community_shared_OrientationEnumfield getLabelOrientation() {*
		return this.labelOrientation;
	*}

	/**
	 * Sets Label Placement (Relative To Icon) Property by String
	 */	
	void setLabelPlacementByString( /**Label Placement (Relative To Icon)*/ String labelPlacement){*
		this.labelPlacement = labelPlacement;
	*}

	/**
	 * Gets Label Placement (Relative To Icon) Property as String
	 */	
	String getLabelPlacementAsString() {*
		return this.labelPlacement;
	*}
	
	/**
	 * Sets Label Placement (Relative To Icon) Property by Choice Option
	 */	
	void setLabelPlacement( /**Label Placement (Relative To Icon)*/ org_scn_community_shared_PlacementTypeEnumfield labelPlacement){*
		this.labelPlacement = labelPlacement;
	*}
	
	/**
	 * Gets Label Placement (Relative To Icon) Property as Choice Option
	 */	
	org_scn_community_shared_PlacementTypeEnumfield getLabelPlacement() {*
		return this.labelPlacement;
	*}

	/**
	 * Gets Unselect Label Property
	 */	
	boolean isLabelUnselect() {*
		return this.labelUnselect;
	*}



	/**
	 * Sets Sprite IDs (Optional) Property
	 */	
	void setSpriteIDs( /**Sprite IDs (Optional)*/ String spriteIDs){*
		this.spriteIDs = spriteIDs;
	*}

	/**
	 * Gets Sprite IDs (Optional) Property
	 */	
	String getSpriteIDs() {*
		return this.spriteIDs;
	*}

	/**
	 * Sets Icon Sprite Sheet (Optional) Property
	 */	
	void setSpriteSheet( /**Icon Sprite Sheet (Optional)*/ String spriteSheet){*
		this.spriteSheet = spriteSheet;
	*}

	/**
	 * Gets Icon Sprite Sheet (Optional) Property
	 */	
	String getSpriteSheet() {*
		return this.spriteSheet;
	*}

	/**
	 * Sets Icons Sprites Per Row Property
	 */	
	void setSpriteSheetPerRow( /**Icons Sprites Per Row*/ int spriteSheetPerRow){*
		this.spriteSheetPerRow = spriteSheetPerRow;
	*}

	/**
	 * Gets Icons Sprites Per Row Property
	 */	
	int getSpriteSheetPerRow() {*
		return this.spriteSheetPerRow;
	*}

	/**
	 * Sets Text Alignment Property by String
	 */	
	void setTextAlignByString( /**Text Alignment*/ String textAlign){*
		this.textAlign = textAlign;
	*}

	/**
	 * Gets Text Alignment Property as String
	 */	
	String getTextAlignAsString() {*
		return this.textAlign;
	*}
	
	/**
	 * Sets Text Alignment Property by Choice Option
	 */	
	void setTextAlign( /**Text Alignment*/ org_scn_community_shared_PlacementTypeEnumfield textAlign){*
		this.textAlign = textAlign;
	*}
	
	/**
	 * Gets Text Alignment Property as Choice Option
	 */	
	org_scn_community_shared_PlacementTypeEnumfield getTextAlign() {*
		return this.textAlign;
	*}

	/** Adds a root element containing key [String], text [String].

 	<example>
	You want to add 2 root elements
	<code>
	LISTSELECTOR.addTitle(key [String], text [String]);<br>
	LISTSELECTOR.addTitle(key [String], text [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addTitle (
			/**Unique Key*/String key, 
			/**Given Text*/String text
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text
			};

		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			this.titles = "[]";
		}

		var elementsJson = JSON.parse(this.titles);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.titles = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	LISTSELECTOR.removeTitle(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeTitle (
			String key
			) {*

		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			this.titles = "[]";
		}

		var elementsJson = JSON.parse(this.titles);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.titles = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	LISTSELECTOR.insertTitle(index [int], key [String], text [String]);<br>
	<br>
	</code>
	</example>
	 */
	void insertTitle (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text
			) {*

		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			this.titles = "[]";
		}
		
		var elementsJson = JSON.parse(this.titles);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.titles = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Title<br/>
	 */
	void updateTitle (
			/**Unique Key*/String key, 
			/**Given Text*/String text
			) 
	{*
		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			this.titles = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text
		};

		var elementsJson = JSON.parse(this.titles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.titles = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getTitleAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			this.titles = "[]";
		}

		var elementsJson = JSON.parse(this.titles);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Titles As JSON String
	 */	
	String getTitlesAsJSON() {*
		var jsonObject = JSON.parse(this.titles);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Titles
	 */	
	String cleanAllTitles() {*
		this.titles = "[]";
	*}
	
	/**
	 * Sets the Text for Title keys<br/>
	 */
	void setTitleTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.titles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.titles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Title Key<br/>
	 */
	void setTitleText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.titles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.titles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Title Key<br/>
	 */
	String getTitleText (
			/**/ String key
			) 
	{*
		if (this.titles === undefined || this.titles === "" || this.titles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.titles);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Vertical Alignment Property by String
	 */	
	void setVerticalAlignByString( /**Vertical Alignment*/ String verticalAlign){*
		this.verticalAlign = verticalAlign;
	*}

	/**
	 * Gets Vertical Alignment Property as String
	 */	
	String getVerticalAlignAsString() {*
		return this.verticalAlign;
	*}
	
	/**
	 * Sets Vertical Alignment Property by Choice Option
	 */	
	void setVerticalAlign( /**Vertical Alignment*/ org_scn_community_shared_PlacementTypeEnumfield verticalAlign){*
		this.verticalAlign = verticalAlign;
	*}
	
	/**
	 * Gets Vertical Alignment Property as Choice Option
	 */	
	org_scn_community_shared_PlacementTypeEnumfield getVerticalAlign() {*
		return this.verticalAlign;
	*}

	/**
	 * Sets Visibilities (Optional) Property
	 */	
	void setVisibilities( /**Visibilities (Optional)*/ String visibilities){*
		this.visibilities = visibilities;
	*}

	/**
	 * Gets Visibilities (Optional) Property
	 */	
	String getVisibilities() {*
		return this.visibilities;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Sets titles of your menu elements.<br/>
	 * <example><code>LISTSELECTOR_1.setTitles("Google,Bing,Ask.com");</code></example><br/>
	 * <note>Seperate each entry by a comma.</note><br/>
	 */
	void setTitles (
			/* Titles */ String titles,
			/* Separator*/ optional String separator
			
			) 
	{*
		if(separator == undefined) separator = ",";
		var titlesSplit = titles.split(separator);
		
		for(var labelI in titlesSplit) {
			var labelO = titlesSplit[labelI];
			
			addTitle(labelO, labelO);
		}
	*}
	
	/**
	Reset selection of menu element titles for complex navigation scenarios
	<example><code>LISTSELECTOR_1.resetSelection();</code></example>
	 */
	void resetSelection(){*
		this.labelUnselect = true;
	*}
	
}

/**
 * Generated ZTL Class for MenuBar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.MenuBar extends org.scn.community.shared.Component {

	/**
	 * Clean All Buttons from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Buttons from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String], enabled [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	MENUBAR.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBAR.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);
	</code>
	</example>
	 */
	void addSubItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		if(url == undefined) { url = "";}
		if(enabled == undefined) { enabled = false;}
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url, 
			enabled:enabled 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	MENUBAR.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBAR.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		this.addSubItem("ROOT", key, 
			text, 
			url, 
			enabled);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	MENUBAR.removeSubItem(String key);<br>
	</code>
	</example>
	 */
	void removeSubItem (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	MENUBAR.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		this.removeSubItem(key);
	*}

	/**
	 * Gets Items As JSON String
	 */	
	String getItemsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Items
	 */	
	String cleanAllItems() {*
		this.elementsContent = "[]";
	*}
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Item keys<br/>
	 */
	void setItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Item Key<br/>
	 */
	void setItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Item Key<br/>
	 */
	String getItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for Item keys<br/>
	 */
	void setItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for Item Key<br/>
	 */
	void setItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of Item keys<br/>
	 */
	void cleanAllItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for Item Key<br/>
	 */
	String getItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Text for SubItem keys<br/>
	 */
	void setSubItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for SubItem Key<br/>
	 */
	void setSubItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for SubItem Key<br/>
	 */
	String getSubItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for SubItem keys<br/>
	 */
	void setSubItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for SubItem Key<br/>
	 */
	void setSubItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for SubItem Key<br/>
	 */
	String getSubItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for SubItem keys<br/>
	 */
	void setSubItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for SubItem Key<br/>
	 */
	void setSubItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of SubItem keys<br/>
	 */
	void cleanAllSubItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for SubItem Key<br/>
	 */
	String getSubItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getSubItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}




	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Gets Technical Proprty For Selected Text Property
	 */	
	String getSelectedText() {*
		return this.selectedText;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Adds a root element containing Key, Text, Image Url information.<br/>
	 * <example><br/>
	 * You want to add 2 root elements, second one is a sibling of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY1", "First Root Element", "");<br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY2", "Second Root Element", "");<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		this.addSubMenuItem(elementKey, elementText, imageUrl, "ROOT", isLeaf, isEnabled);
	*}
	/**
	 * Adds an element containing Key, Text, Image Url, Parent Element and is Leaf information.<br/>
	 * You need to specify a unique and existing parent element.<br/>
	 * if Parent Element is set to "ROOT" then the element will be inserted as root element.<br/>
	 * <example><br/>
	 * You want to add 2 items, second one is a child of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY1", "First Element", "", "ROOT", true);<br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY2", "First Element Child", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addSubMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Element*/ String parentElementKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
			
		if(isEnabled == undefined){
			isEnabled = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"parentKey": parentElementKey,
			"leaf": isLeaf,
			"enabled": isEnabled
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Remove all Buttons<br/>
	 */
	@Visibility(deprecated)
	void removeAllElements (
			
			) 
	{*
		var elementsArray = [];
			this.elementsContent = JSON.stringify(elementsArray);
			
			this.cleanAll = true;
	*}
	
}

/**
 * Generated ZTL Class for MenuButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.MenuButton extends org.scn.community.shared.Component {

	/**
	 * Clean All Buttons from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Buttons from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String], enabled [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	MENUBUTTON.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBUTTON.addSubItem(parentKey [String], key [String], text [String], url [String], enabled [boolean]);
	</code>
	</example>
	 */
	void addSubItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		if(url == undefined) { url = "";}
		if(enabled == undefined) { enabled = false;}
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url, 
			enabled:enabled 
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	MENUBUTTON.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	MENUBUTTON.addItem(key [String], text [String], url [String], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addItem (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/optional String url, 
			/**Enabled*/optional boolean enabled
			) {*		
		
		this.addSubItem("ROOT", key, 
			text, 
			url, 
			enabled);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	MENUBUTTON.removeSubItem(String key);<br>
	</code>
	</example>
	 */
	void removeSubItem (
			String key
			) {*		
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	MENUBUTTON.removeItem(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		this.removeSubItem(key);
	*}

	/**
	 * Gets Items As JSON String
	 */	
	String getItemsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Items
	 */	
	String cleanAllItems() {*
		this.elementsContent = "[]";
	*}
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Item keys<br/>
	 */
	void setItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Item Key<br/>
	 */
	void setItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Item Key<br/>
	 */
	String getItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for Item keys<br/>
	 */
	void setItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for Item Key<br/>
	 */
	void setItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of Item keys<br/>
	 */
	void cleanAllItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for Item Key<br/>
	 */
	String getItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Text for SubItem keys<br/>
	 */
	void setSubItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for SubItem Key<br/>
	 */
	void setSubItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for SubItem Key<br/>
	 */
	String getSubItemText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for SubItem keys<br/>
	 */
	void setSubItemUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for SubItem Key<br/>
	 */
	void setSubItemUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for SubItem Key<br/>
	 */
	String getSubItemUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Enabled for SubItem keys<br/>
	 */
	void setSubItemEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for SubItem Key<br/>
	 */
	void setSubItemEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of SubItem keys<br/>
	 */
	void cleanAllSubItemEnableds (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for SubItem Key<br/>
	 */
	String getSubItemEnabled (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getSubItemEnabledKeysArray (
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}



	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}

	/**
	 * Gets Technical Proprty For Selected Text Property
	 */	
	String getSelectedText() {*
		return this.selectedText;
	*}

	/**
	 * Sets Text Value Property
	 */	
	void setText( /**Text Value*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Text Value Property
	 */	
	String getText() {*
		return this.text;
	*}

	/**
	 * Sets Tooltip Value Property
	 */	
	void setTooltip( /**Tooltip Value*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Value Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Adds a root element containing Key, Text, Image Url information.<br/>
	 * <example><br/>
	 * You want to add 2 root elements, second one is a sibling of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY1", "First Root Element", "");<br/>
	 * MENUBUTTON_1.addMenuItem("ROOT_KEY2", "Second Root Element", "");<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		this.addSubMenuItem(elementKey, elementText, imageUrl, "ROOT", isLeaf, isEnabled);
	*}
	/**
	 * Adds an element containing Key, Text, Image Url, Parent Element and is Leaf information.<br/>
	 * You need to specify a unique and existing parent element.<br/>
	 * if Parent Element is set to "ROOT" then the element will be inserted as root element.<br/>
	 * <example><br/>
	 * You want to add 2 items, second one is a child of first one<br/>
	 * <code><br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY1", "First Element", "", "ROOT", true);<br/>
	 * MENUBUTTON_1.addSubMenuItem("KEY2", "First Element Child", "", "KEY1", true);<br/>
	 * </code><br/>
	 * </example><br/>
	 */
	@Visibility(deprecated)
	void addSubMenuItem (
			/*Element Key (must be unique)*/ String elementKey,
			/*Element text*/ String elementText,
			/*Image URL if not set no image*/ String imageUrl,
			/*The Key of the parent Element*/ String parentElementKey,
			/*Leafs do not have expand option by default*/ optional boolean isLeaf,
			/*item enabled flag*/ optional boolean isEnabled
			
			) 
	{*
		if(isLeaf == undefined) {
			isLeaf = true;
		}
			
		if(isEnabled == undefined){
			isEnabled = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"parentKey": parentElementKey,
			"leaf": isLeaf,
			"enabled": isEnabled
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Remove all Buttons<br/>
	 */
	@Visibility(deprecated)
	void removeAllElements (
			
			) 
	{*
		var elementsArray = [];
			this.elementsContent = JSON.stringify(elementsArray);
			
			this.cleanAll = true;
	*}
	
}

/**
 * Class for ModalBrowser
 */
class org.scn.community.basics.ModalBrowser extends org.scn.community.shared.Component {
	
	/**
	Invoke Click event
	*/
	String click() {*
		this.clickTrigger = Math.random();
	*}
	
	/**
	Sets URL
	<example><code>BROWSERPOPUP_1.setURL("http://server.example.com/BOE/OpenDocument/opendoc/openDocument.jsp?sIDType=CUID&iDocID=ABC123XYZ");</code></example>
	<note>If opening a page in a Modal Browser Dialog, make sure that the page does not use a Frame Buster.</note>
	*/
	void setURL( /* URL */ String url){*
		this.url = url;
	*}
	
	/**
	Gets URL
	*/
	String getURL() {*
		return this.url;
	*}
}

/**
 * Generated ZTL Class for NavigationBar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.NavigationBar extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], visible [boolean], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	NAVIGATIONBAR.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	NAVIGATIONBAR.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
			};

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	NAVIGATIONBAR.removeStep(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeStep (
			String key
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	NAVIGATIONBAR.insertStep(index [int], key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertStep (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.DElementsContent = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Step<br/>
	 */
	void updateStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getStepAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Steps As JSON String
	 */	
	String getStepsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Steps
	 */	
	String cleanAllSteps() {*
		this.DElementsContent = "[]";
	*}
	
	/**
	 * Sets the Text for Step keys<br/>
	 */
	void setStepTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Step Key<br/>
	 */
	void setStepText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Step Key<br/>
	 */
	String getStepText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Visible for Step keys<br/>
	 */
	void setStepVisibles (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].visible = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Visible for Step Key<br/>
	 */
	void setStepVisible (
			/**/ String key,
			/**/ boolean visible
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].visible = visible;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Visible of Step keys<br/>
	 */
	void cleanAllStepVisibles (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Visible for Step Key<br/>
	 */
	String getStepVisible (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].visible;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Visible keys<br/>
	 */
	org.scn.community.shared.KeyArray getStepVisibleKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].visible == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Enabled for Step keys<br/>
	 */
	void setStepEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for Step Key<br/>
	 */
	void setStepEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of Step keys<br/>
	 */
	void cleanAllStepEnableds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for Step Key<br/>
	 */
	String getStepEnabled (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getStepEnabledKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Selected Step Key Property
	 */	
	void setSelectedKey( /**Selected Step Key*/ String selectedKey){*
		this.DSelectedKey = selectedKey;
	*}

	/**
	 * Gets Selected Step Key Property
	 */	
	String getSelectedKey() {*
		return this.DSelectedKey;
	*}

	/**
	 * Gets Selected Text Property
	 */	
	String getSelectedText() {*
		return this.DSelectedText;
	*}

	/**
	 * Gets Number Of Visible Steps Property
	 */	
	String getNumberOfVisibleSteps() {*
		return this.numberOfVisibleSteps;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions	
	/** resets item selection */
	void resetItemSelection () {*
		this.DSelectedKey = "invisible_dummy_select";
	*}
}

/**
 * Generated ZTL Class for NotificationBar
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.NotificationBar extends org.scn.community.shared.Component {



	/**
	 * Sets Connect To Common Messages Property
	 */	
	void setConnectToCommonMessages( /**Connect To Common Messages*/ boolean connectToCommonMessages){*
		this.connectToCommonMessages = connectToCommonMessages;
	*}

	/**
	 * Gets Connect To Common Messages Property
	 */	
	boolean isConnectToCommonMessages() {*
		return this.connectToCommonMessages;
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Sets Delete Notification When Clicked Property
	 */	
	void setDeleteNotificationOnClick( /**Delete Notification When Clicked*/ boolean deleteNotificationOnClick){*
		this.deleteNotificationOnClick = deleteNotificationOnClick;
	*}

	/**
	 * Gets Delete Notification When Clicked Property
	 */	
	boolean isDeleteNotificationOnClick() {*
		return this.deleteNotificationOnClick;
	*}





	/**
	 * Sets Remove All Notifications When Minimized Property
	 */	
	void setRemoveAllOnMinimize( /**Remove All Notifications When Minimized*/ boolean removeAllOnMinimize){*
		this.removeAllOnMinimize = removeAllOnMinimize;
	*}

	/**
	 * Gets Remove All Notifications When Minimized Property
	 */	
	boolean isRemoveAllOnMinimize() {*
		return this.removeAllOnMinimize;
	*}

	/**
	 * Sets Show Notification Bar When New Notifications Are Available Property
	 */	
	void setShowOnNewNotifications( /**Show Notification Bar When New Notifications Are Available*/ boolean showOnNewNotifications){*
		this.showOnNewNotifications = showOnNewNotifications;
	*}

	/**
	 * Gets Show Notification Bar When New Notifications Are Available Property
	 */	
	boolean isShowOnNewNotifications() {*
		return this.showOnNewNotifications;
	*}

	/**
	 * Sets Split Notifications By Priority Property
	 */	
	void setSplitNotificationsByPriority( /**Split Notifications By Priority*/ boolean splitNotificationsByPriority){*
		this.splitNotificationsByPriority = splitNotificationsByPriority;
	*}

	/**
	 * Gets Split Notifications By Priority Property
	 */	
	boolean isSplitNotificationsByPriority() {*
		return this.splitNotificationsByPriority;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/** 
	 * Add Category
	 */
	void addCategory (
			/**Category Key*/String categoryKey, 
			/**Category Text*/String categoryText, 
			/**Category Image*/String categoryImage)
	{*

		var categoryDef = {
				"key": categoryKey,
				"text": categoryText,
				"image": categoryImage
				};
			
		if (this.categories === undefined || this.categories === "" || this.categories === "<delete>"){
			this.categories = "[]";
		}

		var caregoriesJson = JSON.parse(this.categories);
		caregoriesJson.push(categoryDef);
		
		this.categories = JSON.stringify(caregoriesJson);
	*}

	/**
	 * Add an Error Notification
	 */
	void addErrorNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "ERROR", categoryKey, "");
	*}
			
	/**
	 * Add a Warning Notification
	 */
	void addWarningNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "WARNING", categoryKey, "");
	*}

	/**
	 * Add an Info Notification
	 */
	void addInfoNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "INFO", categoryKey, "");
	*}

	/**
	 * Add a Success Notification
	 */
	void addSuccessNotification (
			/**Notification Text */String notificationText,
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey 
			)
	{*
		this.addNotification(notificationText, "SUCCESS", categoryKey, "");
	*}

	/** 
	 * Add Notification
	 * 
	 */
	void addNotification (
			/**Notification Text */String notificationText, 
			/**Notification Level (ERROR|WARNING|INFO|SUCCESS) */String notificationLevel, 
			/**Optional: Category Key as defined in addCategory*/optional String categoryKey, 
			/**Optional: Notification Key */ optional String notificationKey)
	{*
		var itemDef = { 
				"category": categoryKey,
				"key": notificationKey, 
				"text": notificationText, 
				"level": notificationLevel
				};

		if (this.notifications === undefined || this.notifications === "" || this.notifications === "<delete>"){
			this.notifications = "[]";
		}
		
		var notificationsJson = JSON.parse(this.notifications);
		notificationsJson.push(itemDef);

		this.notifications = JSON.stringify(notificationsJson);
	*}
	
	/**
	 * Minimize notification bar (for example on timeout event of TIMEOUT component)
	 */
	void minimizeBar(){*
		this.minimize = calcTimestamp();
	*}
	
	@Visibility(private)
	/**
	 *	Workaround for strange DesignStudio lifecycle handling when calling functions via scriptting triggers
	 */
	String calcTimestamp() {*
		return new Date().valueOf();
	*}
}

/**
 * Generated ZTL Class for Notify
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Notify extends org.scn.community.shared.Component {

	/**
	 * Sets Delay(Seconds) Property
	 */	
	void setDelay( /**Delay(Seconds)*/ int delay){*
		this.delay = delay;
	*}

	/**
	 * Gets Delay(Seconds) Property
	 */	
	int getDelay() {*
		return this.delay;
	*}

	/**
	 * Sets Layout Property by String
	 */	
	void setLayoutByString( /**Layout*/ String layout){*
		this.layout = layout;
	*}

	/**
	 * Gets Layout Property as String
	 */	
	String getLayoutAsString() {*
		return this.layout;
	*}
	
	/**
	 * Sets Layout Property by Choice Option
	 */	
	void setLayout( /**Layout*/ org_scn_community_shared_Enumfield layout){*
		this.layout = layout;
	*}
	
	/**
	 * Gets Layout Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getLayout() {*
		return this.layout;
	*}

	/**
	 * Sets Modal Property
	 */	
	void setModal( /**Modal*/ boolean modal){*
		this.modal = modal;
	*}

	/**
	 * Gets Modal Property
	 */	
	boolean isModal() {*
		return this.modal;
	*}

	/**
	 * Gets Msgtext Property
	 */	
	String getMsgtext() {*
		return this.msgtext;
	*}

	/**
	 * Gets Msgtype Property
	 */	
	String getMsgtype() {*
		return this.msgtype;
	*}

	/**
	 * Gets Shownote Property
	 */	
	String getShownote() {*
		return this.shownote;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**

	 */
	void alert (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "alert";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	/**

	 */
	void error (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "error";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	/**

	 */
	void information (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "information";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	/**

	 */
	void notification (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "notification";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	/**

	 */
	void success (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "success";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	/**

	 */
	void warning (
			/* Text to be shown */ String text
			
			) 
	{*
		this["msgtype"] = "warning";
		this["msgtext"] = text;
		this["shownote"] = "Y";
	*}
	
}

/**
 * Generated ZTL Class for Map
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Map extends org.scn.community.shared.Component {

	/**
	 * Clean All Locations from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Locations from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.elementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/** Adds a root element containing key [String], text [String], url [string], lat [float], long [float].

 	<example>
	You want to add 2 root elements
	<code>
	MAP.addLocation(key [String], text [String], url [string], lat [float], long [float]);<br>
	MAP.addLocation(key [String], text [String], url [string], lat [float], long [float]);<br>
	<br>
	</code>
	</example>
	 */
	void addLocation (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/string url, 
			/**Latitude*/float lat, 
			/**Longitude*/float long
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			lat:lat, 
			long:long
			};

		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	MAP.removeLocation(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeLocation (
			String key
			) {*

		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	MAP.insertLocation(index [int], key [String], text [String], url [string], lat [float], long [float]);<br>
	<br>
	</code>
	</example>
	 */
	void insertLocation (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/string url, 
			/**Latitude*/float lat, 
			/**Longitude*/float long
			) {*

		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			lat:lat, 
			long:long
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.elementsContent = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Location<br/>
	 */
	void updateLocation (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image Url*/string url, 
			/**Latitude*/float lat, 
			/**Longitude*/float long
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			url:url, 
			lat:lat, 
			long:long
		};

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getLocationAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.elementsContent);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Locations As JSON String
	 */	
	String getLocationsAsJSON() {*
		var jsonObject = JSON.parse(this.elementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Locations
	 */	
	String cleanAllLocations() {*
		this.elementsContent = "[]";
	*}
	
	/**
	 * Sets the Text for Location keys<br/>
	 */
	void setLocationTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Location Key<br/>
	 */
	void setLocationText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Location Key<br/>
	 */
	String getLocationText (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for Location keys<br/>
	 */
	void setLocationUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for Location Key<br/>
	 */
	void setLocationUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for Location Key<br/>
	 */
	String getLocationUrl (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Lat for Location keys<br/>
	 */
	void setLocationLats (
			/**/ String keys,
			/**/ String separator,
	        /* Lat */ float lat
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].lat = lat;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Lat for Location Key<br/>
	 */
	void setLocationLat (
			/**/ String key,
			/**/ float lat
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].lat = lat;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Lat for Location Key<br/>
	 */
	float getLocationLat (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].lat;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Long for Location keys<br/>
	 */
	void setLocationLongs (
			/**/ String keys,
			/**/ String separator,
	        /* Long */ float long
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].long = long;
					break;
				}
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Long for Location Key<br/>
	 */
	void setLocationLong (
			/**/ String key,
			/**/ float long
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].long = long;
				break;
			}
		}

		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Long for Location Key<br/>
	 */
	float getLocationLong (
			/**/ String key
			) 
	{*
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.elementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].long;
				break;
			}
		}
		
		return value;
	*}



	/**
	 * Sets Url to Use for the Map Property
	 */	
	void setMapUrl( /**Url to Use for the Map*/ String mapUrl){*
		this.mapUrl = mapUrl;
	*}

	/**
	 * Gets Url to Use for the Map Property
	 */	
	String getMapUrl() {*
		return this.mapUrl;
	*}











	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Zooms in the map
	 */
	void zoomIn() {*
		this.zoom = this.zoom + 1;
	*}
	
	/**
	 * Zooms out the map
	 */
	void zoomOut() {*
		this.zoom = this.zoom - 1;
	*}

	/**
	 * Moves the view on the map in the left direction
	 */
	void panLeft() {*
		this.panAction = this.panAction + 1; 
		this.pan = "0L00";
	*}

	/**
	 * Moves the view on the map in the right direction
	 */
	void panRight() {*
		this.panAction = this.panAction + 1; 
		this.pan = "00R0";
	*}
	
	/**
	 * Moves the view on the map in the up direction
	 */
	void panUp() {*
		this.panAction = this.panAction + 1; 
		this.pan = "U000";
	*}

	/**
	 * Moves the view on the map in the down direction
	 */
	void panDown() {*
		this.panAction = this.panAction + 1; 
		this.pan = "000D";
	*}

	/**
	 * Moves the map to the given location by key
	 */
	void moveTo (
			/**key which schould be moved to*/String key) {*
		this.moveAction = this.moveAction + 1;
		this.moveTo = key
	*}
}

/**
 * Generated ZTL Class for Paginator
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Paginator extends org.scn.community.shared.Component {

	/**
	 * Sets Current Page Property
	 */	
	void setCurrentPage( /**Current Page*/ int currentPage){*
		this.currentPage = currentPage;
	*}

	/**
	 * Gets Current Page Property
	 */	
	int getCurrentPage() {*
		return this.currentPage;
	*}

	/**
	 * Sets Number Of Pages Property
	 */	
	void setNumberOfPages( /**Number Of Pages*/ int numberOfPages){*
		this.numberOfPages = numberOfPages;
	*}

	/**
	 * Gets Number Of Pages Property
	 */	
	int getNumberOfPages() {*
		return this.numberOfPages;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for PasswordField
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.PasswordField extends org.scn.community.shared.Component {

	/**
	 * Sets Editable Property
	 */	
	void setEditable( /**Editable*/ boolean editable){*
		this.editable = editable;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}



	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ String value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	String getValue() {*
		return this.value;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ProgressIndicator
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ProgressIndicator extends org.scn.community.shared.Component {

	/**
	 * Sets Bar Colour Property by String
	 */	
	void setBarColorByString( /**Bar Colour*/ String barColor){*
		this.barColor = barColor;
	*}

	/**
	 * Gets Bar Colour Property as String
	 */	
	String getBarColorAsString() {*
		return this.barColor;
	*}
	
	/**
	 * Sets Bar Colour Property by Choice Option
	 */	
	void setBarColor( /**Bar Colour*/ org_scn_community_shared_BarColorEnumfield barColor){*
		this.barColor = barColor;
	*}
	
	/**
	 * Gets Bar Colour Property as Choice Option
	 */	
	org_scn_community_shared_BarColorEnumfield getBarColor() {*
		return this.barColor;
	*}

	/**
	 * Sets Display Value Property
	 */	
	void setDisplayValue( /**Display Value*/ String displayValue){*
		this.displayValue = displayValue;
	*}

	/**
	 * Gets Display Value Property
	 */	
	String getDisplayValue() {*
		return this.displayValue;
	*}

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}

	/**
	 * Sets Percent Value Property
	 */	
	void setPercentValue( /**Percent Value*/ int percentValue){*
		this.percentValue = percentValue;
	*}

	/**
	 * Gets Percent Value Property
	 */	
	int getPercentValue() {*
		return this.percentValue;
	*}

	/**
	 * Sets Show Value Property
	 */	
	void setShowValue( /**Show Value*/ boolean showValue){*
		this.showValue = showValue;
	*}

	/**
	 * Gets Show Value Property
	 */	
	boolean isShowValue() {*
		return this.showValue;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for QRCode
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.QRCode extends org.scn.community.shared.Component {

	/**
	 * Sets Background Colour Property
	 */	
	void setBackground( /**Background Colour*/ String background){*
		this.background = background;
	*}

	/**
	 * Gets Background Colour Property
	 */	
	String getBackground() {*
		return this.background;
	*}

	/**
	 * Sets Error Correction Level Property by String
	 */	
	void setEcLevelByString( /**Error Correction Level*/ String ecLevel){*
		this.ecLevel = ecLevel;
	*}

	/**
	 * Gets Error Correction Level Property as String
	 */	
	String getEcLevelAsString() {*
		return this.ecLevel;
	*}
	
	/**
	 * Sets Error Correction Level Property by Choice Option
	 */	
	void setEcLevel( /**Error Correction Level*/ org_scn_community_shared_Enumfield ecLevel){*
		this.ecLevel = ecLevel;
	*}
	
	/**
	 * Gets Error Correction Level Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getEcLevel() {*
		return this.ecLevel;
	*}

	/**
	 * Sets Fill Colour Property
	 */	
	void setFill( /**Fill Colour*/ String fill){*
		this.fill = fill;
	*}

	/**
	 * Gets Fill Colour Property
	 */	
	String getFill() {*
		return this.fill;
	*}

	/**
	 * Sets Max Version (1-40) Property
	 */	
	void setMaxVersion( /**Max Version (1-40)*/ int maxVersion){*
		this.maxVersion = maxVersion;
	*}

	/**
	 * Gets Max Version (1-40) Property
	 */	
	int getMaxVersion() {*
		return this.maxVersion;
	*}

	/**
	 * Sets Min Version (1-40) Property
	 */	
	void setMinVersion( /**Min Version (1-40)*/ int minVersion){*
		this.minVersion = minVersion;
	*}

	/**
	 * Gets Min Version (1-40) Property
	 */	
	int getMinVersion() {*
		return this.minVersion;
	*}



	/**
	 * Sets Only Show On Printouts Property
	 */	
	void setPrintOnly( /**Only Show On Printouts*/ boolean printOnly){*
		this.printOnly = printOnly;
	*}

	/**
	 * Gets Only Show On Printouts Property
	 */	
	boolean isPrintOnly() {*
		return this.printOnly;
	*}

	/**
	 * Sets Quiet Zone Property
	 */	
	void setQuiet( /**Quiet Zone*/ float quiet){*
		this.quiet = quiet;
	*}

	/**
	 * Gets Quiet Zone Property
	 */	
	float getQuiet() {*
		return this.quiet;
	*}

	/**
	 * Sets Corner Radius (0.0 - 0.5) Property
	 */	
	void setRadius( /**Corner Radius (0.0 - 0.5)*/ float radius){*
		this.radius = radius;
	*}

	/**
	 * Gets Corner Radius (0.0 - 0.5) Property
	 */	
	float getRadius() {*
		return this.radius;
	*}

	/**
	 * Sets Render Mode Property by String
	 */	
	void setRenderByString( /**Render Mode*/ String render){*
		this.render = render;
	*}

	/**
	 * Gets Render Mode Property as String
	 */	
	String getRenderAsString() {*
		return this.render;
	*}
	
	/**
	 * Sets Render Mode Property by Choice Option
	 */	
	void setRender( /**Render Mode*/ org_scn_community_shared_Enumfield render){*
		this.render = render;
	*}
	
	/**
	 * Gets Render Mode Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getRender() {*
		return this.render;
	*}

	/**
	 * Sets QR Code Text Property
	 */	
	void setText( /**QR Code Text*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets QR Code Text Property
	 */	
	String getText() {*
		return this.text;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for RangeSlider
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RangeSlider extends org.scn.community.shared.Component {

	/**
	 * Sets Activate Live Change Event (prototype) Property
	 */	
	void setLiveChangeActive( /**Activate Live Change Event (prototype)*/ boolean liveChangeActive){*
		this.DLiveChangeActive = liveChangeActive;
	*}

	/**
	 * Gets Activate Live Change Event (prototype) Property
	 */	
	boolean isLiveChangeActive() {*
		return this.DLiveChangeActive;
	*}

	/**
	 * Sets First Value (Live) Property
	 */	
	void setLiveValue( /**First Value (Live)*/ float liveValue){*
		this.liveValue = liveValue;
	*}

	/**
	 * Gets First Value (Live) Property
	 */	
	float getLiveValue() {*
		return this.liveValue;
	*}

	/**
	 * Sets Second Value (Live) Property
	 */	
	void setLiveValue2( /**Second Value (Live)*/ float liveValue2){*
		this.liveValue2 = liveValue2;
	*}

	/**
	 * Gets Second Value (Live) Property
	 */	
	float getLiveValue2() {*
		return this.liveValue2;
	*}

	/**
	 * Sets Maximum Value Property
	 */	
	void setMax( /**Maximum Value*/ float max){*
		this.max = max;
	*}

	/**
	 * Gets Maximum Value Property
	 */	
	float getMax() {*
		return this.max;
	*}

	/**
	 * Sets Minimum Value Property
	 */	
	void setMin( /**Minimum Value*/ float min){*
		this.min = min;
	*}

	/**
	 * Gets Minimum Value Property
	 */	
	float getMin() {*
		return this.min;
	*}





	/**
	 * Sets Small Step Width Property
	 */	
	void setSmallStepWidth( /**Small Step Width*/ float smallStepWidth){*
		this.smallStepWidth = smallStepWidth;
	*}

	/**
	 * Gets Small Step Width Property
	 */	
	float getSmallStepWidth() {*
		return this.smallStepWidth;
	*}

	/**
	 * Sets Step Labels Property
	 */	
	void setStepLabels( /**Step Labels*/ boolean stepLabels){*
		this.stepLabels = stepLabels;
	*}

	/**
	 * Gets Step Labels Property
	 */	
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/**
	 * Sets Total Units Property
	 */	
	void setTotalUnits( /**Total Units*/ int totalUnits){*
		this.totalUnits = totalUnits;
	*}

	/**
	 * Gets Total Units Property
	 */	
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/**
	 * Sets First Value Property
	 */	
	void setValue( /**First Value*/ float value){*
		this.value = value;
	*}

	/**
	 * Gets First Value Property
	 */	
	float getValue() {*
		return this.value;
	*}

	/**
	 * Sets Second Value Property
	 */	
	void setValue2( /**Second Value*/ float value2){*
		this.value2 = value2;
	*}

	/**
	 * Gets Second Value Property
	 */	
	float getValue2() {*
		return this.value2;
	*}

	/**
	 * Sets Change To Vertical Orientation Property
	 */	
	void setVertical( /**Change To Vertical Orientation*/ boolean vertical){*
		this.vertical = vertical;
	*}

	/**
	 * Gets Change To Vertical Orientation Property
	 */	
	boolean isVertical() {*
		return this.vertical;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
/**
 * Class for RapidPrototype 
 */
class org.scn.community.basics.MockUp extends org.scn.community.shared.Component {

	/* Returns the current value */
	String getHTML() {*
		return this.HTML;
	*}

	/* Sets the value */
	void setHTML(/* HTML */ String html) {*
		this.HTML = html;
	*}
	
	void setTerm( /* Placeholder Text */ String term, /* Index */ int index){*
		this["term"+index] = term;
	*}

	void setReplacement( /* Placeholder Text */ String replacement, /* Index */ int index){*
		this["replacement"+index] = replacement;
	*}
}

/**
 * Generated ZTL Class for RatingIndicator
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RatingIndicator extends org.scn.community.shared.Component {

	/**
	 * Sets Editable Property
	 */	
	void setEditable( /**Editable*/ boolean editable){*
		this.editable = editable;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}

	/**
	 * Sets Icon Hovered Property
	 */	
	void setIconHovered( /**Icon Hovered*/ String iconHovered){*
		this.iconHovered = iconHovered;
	*}

	/**
	 * Gets Icon Hovered Property
	 */	
	String getIconHovered() {*
		return this.iconHovered;
	*}

	/**
	 * Sets Icon Selected Property
	 */	
	void setIconSelected( /**Icon Selected*/ String iconSelected){*
		this.iconSelected = iconSelected;
	*}

	/**
	 * Gets Icon Selected Property
	 */	
	String getIconSelected() {*
		return this.iconSelected;
	*}

	/**
	 * Sets Icon Unselected Property
	 */	
	void setIconUnselected( /**Icon Unselected*/ String iconUnselected){*
		this.iconUnselected = iconUnselected;
	*}

	/**
	 * Gets Icon Unselected Property
	 */	
	String getIconUnselected() {*
		return this.iconUnselected;
	*}

	/**
	 * Sets Maximum Value Property
	 */	
	void setMaxValue( /**Maximum Value*/ int maxValue){*
		this.maxValue = maxValue;
	*}

	/**
	 * Gets Maximum Value Property
	 */	
	int getMaxValue() {*
		return this.maxValue;
	*}



	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ float value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	float getValue() {*
		return this.value;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for RoadMap
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RoadMap extends org.scn.community.shared.Component {

	/**
	 * Clean All Elements from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Elements from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/** Adds a root element containing key [String], text [String], visible [boolean], enabled [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	ROADMAP.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	ROADMAP.addStep(key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
			};

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	ROADMAP.removeStep(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeStep (
			String key
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	ROADMAP.insertStep(index [int], key [String], text [String], visible [boolean], enabled [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void insertStep (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) {*

		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.DElementsContent = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Step<br/>
	 */
	void updateStep (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Visible*/boolean visible, 
			/**Enabled*/boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			visible:visible, 
			enabled:enabled
		};

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getStepAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Steps As JSON String
	 */	
	String getStepsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Steps
	 */	
	String cleanAllSteps() {*
		this.DElementsContent = "[]";
	*}
	
	/**
	 * Sets the Text for Step keys<br/>
	 */
	void setStepTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Step Key<br/>
	 */
	void setStepText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Step Key<br/>
	 */
	String getStepText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Visible for Step keys<br/>
	 */
	void setStepVisibles (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].visible = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Visible for Step Key<br/>
	 */
	void setStepVisible (
			/**/ String key,
			/**/ boolean visible
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].visible = visible;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Visible of Step keys<br/>
	 */
	void cleanAllStepVisibles (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].visible = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Visible for Step Key<br/>
	 */
	String getStepVisible (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].visible;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Visible keys<br/>
	 */
	org.scn.community.shared.KeyArray getStepVisibleKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].visible == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Enabled for Step keys<br/>
	 */
	void setStepEnableds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].enabled = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Enabled for Step Key<br/>
	 */
	void setStepEnabled (
			/**/ String key,
			/**/ boolean enabled
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].enabled = enabled;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Enabled of Step keys<br/>
	 */
	void cleanAllStepEnableds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].enabled = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Enabled for Step Key<br/>
	 */
	String getStepEnabled (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].enabled;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Enabled keys<br/>
	 */
	org.scn.community.shared.KeyArray getStepEnabledKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].enabled == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}



	/**
	 * Sets Selected Step Key Property
	 */	
	void setSelectedKey( /**Selected Step Key*/ String selectedKey){*
		this.DSelectedKey = selectedKey;
	*}

	/**
	 * Gets Selected Step Key Property
	 */	
	String getSelectedKey() {*
		return this.DSelectedKey;
	*}

	/**
	 * Sets Number Of Visible Steps Property
	 */	
	void setNumberOfVisibleSteps( /**Number Of Visible Steps*/ int numberOfVisibleSteps){*
		this.numberOfVisibleSteps = numberOfVisibleSteps;
	*}

	/**
	 * Gets Number Of Visible Steps Property
	 */	
	int getNumberOfVisibleSteps() {*
		return this.numberOfVisibleSteps;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for RSSFeedReader
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.RSSFeedReader extends org.scn.community.shared.Component {

	/**
	 * Sets CSS URL Property
	 */	
	void setCssUrl( /**CSS URL*/ String cssUrl){*
		this.cssUrl = cssUrl;
	*}

	/**
	 * Gets CSS URL Property
	 */	
	String getCssUrl() {*
		return this.cssUrl;
	*}

	/**
	 * Sets RSS Feed URL Property
	 */	
	void setFeedUrl( /**RSS Feed URL*/ String feedUrl){*
		this.feedUrl = feedUrl;
	*}

	/**
	 * Gets RSS Feed URL Property
	 */	
	String getFeedUrl() {*
		return this.feedUrl;
	*}

	/**
	 * Sets Use Build-In Xsl File Property
	 */	
	void setUseBuildInXsl( /**Use Build-In Xsl File*/ boolean useBuildInXsl){*
		this.useBuildInXsl = useBuildInXsl;
	*}

	/**
	 * Gets Use Build-In Xsl File Property
	 */	
	boolean isUseBuildInXsl() {*
		return this.useBuildInXsl;
	*}

	/**
	 * Sets XSL URL Property
	 */	
	void setXslUrl( /**XSL URL*/ String xslUrl){*
		this.xslUrl = xslUrl;
	*}

	/**
	 * Gets XSL URL Property
	 */	
	String getXslUrl() {*
		return this.xslUrl;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for SegmentedButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.SegmentedButton extends org.scn.community.shared.Component {

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DElementsContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Image Property
	 */	
	void setDefaultImage( /**Url For Default Image*/ String defaultImage){*
		this.DDefaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Image Property
	 */	
	String getDefaultImage() {*
		return this.DDefaultImage;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], image [String], selected [boolean] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	SEGMENTEDBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);<br>
	SEGMENTEDBUTTON.addItem(parentKey [String], key [String], text [String], image [String], selected [boolean]);
	</code>
	</example>
	 */
	void addItem (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Selected*/boolean selected
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			image:image, 
			selected:selected 
			};
	
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], image [String], selected [boolean].

 	<example>
	You want to add 2 root elements
	<code>
	SEGMENTEDBUTTON.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	SEGMENTEDBUTTON.addButton(key [String], text [String], image [String], selected [boolean]);<br>
	<br>
	</code>
	</example>
	 */
	void addButton (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Image*/String image, 
			/**Selected*/boolean selected
			) {*		
		
		this.addItem("ROOT", key, 
			text, 
			image, 
			selected);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	SEGMENTEDBUTTON.removeItem(String key);<br>
	</code>
	</example>
	 */
	void removeItem (
			String key
			) {*		
		
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			this.DElementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	SEGMENTEDBUTTON.removeButton(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeButton (
			String key
			) {*		
		
		this.removeItem(key);
	*}

	/**
	 * Gets Buttons As JSON String
	 */	
	String getButtonsAsJSON() {*
		var jsonObject = JSON.parse(this.DElementsContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Buttons
	 */	
	String cleanAllButtons() {*
		this.DElementsContent = "[]";
	*}
	/**
	 * Sets the Text for Button keys<br/>
	 */
	void setButtonTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Button Key<br/>
	 */
	void setButtonText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Button Key<br/>
	 */
	String getButtonText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Image for Button keys<br/>
	 */
	void setButtonImages (
			/**/ String keys,
			/**/ String separator,
	        /* Image */ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].image = image;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Image for Button Key<br/>
	 */
	void setButtonImage (
			/**/ String key,
			/**/ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].image = image;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Image for Button Key<br/>
	 */
	String getButtonImage (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].image;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Selected for Button keys<br/>
	 */
	void setButtonSelecteds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected for Button Key<br/>
	 */
	void setButtonSelected (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected of Button keys<br/>
	 */
	void cleanAllButtonSelecteds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Selected for Button Key<br/>
	 */
	String getButtonSelected (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].selected;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.community.shared.KeyArray getButtonSelectedKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}
	/**
	 * Sets the Text for Item keys<br/>
	 */
	void setItemTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Item Key<br/>
	 */
	void setItemText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Item Key<br/>
	 */
	String getItemText (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Image for Item keys<br/>
	 */
	void setItemImages (
			/**/ String keys,
			/**/ String separator,
	        /* Image */ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].image = image;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Image for Item Key<br/>
	 */
	void setItemImage (
			/**/ String key,
			/**/ String image
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].image = image;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Image for Item Key<br/>
	 */
	String getItemImage (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].image;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Selected for Item keys<br/>
	 */
	void setItemSelecteds (
			/**/ String keys,
			/**/ String separator
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
			
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].selected = true;
					break;
				}
			}
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Selected for Item Key<br/>
	 */
	void setItemSelected (
			/**/ String key,
			/**/ boolean selected
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].selected = selected;
				break;
			}
		}

		this.DElementsContent = JSON.stringify(elementsJson);
	*}

		
	/**
	 * Clean all Selected of Item keys<br/>
	 */
	void cleanAllItemSelecteds (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}
	
		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			// clean all
			elementsJson[i].selected = false;
		}
		
		this.DElementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Selected for Item Key<br/>
	 */
	String getItemSelected (
			/**/ String key
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.DElementsContent);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].selected;
				break;
			}
		}
		
		return value;
	*}

	/**
	 * Returns the Selected keys<br/>
	 */
	org.scn.community.shared.KeyArray getItemSelectedKeysArray (
			) 
	{*
		if (this.DElementsContent === undefined || this.DElementsContent === "" || this.DElementsContent === "<delete>"){
			return [];
		}
		
		var elementsJson = JSON.parse(this.DElementsContent);
		
		var newElementsJson = [];
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].selected == true) {
				newElementsJson.push({"key": elementsJson[i].key});
			}
		}
		
		return newElementsJson;
	*}


	/**
	 * Sets Size Of The Image Property by String
	 */	
	void setImageSizeByString( /**Size Of The Image*/ String imageSize){*
		this.DImageSize = imageSize;
	*}

	/**
	 * Gets Size Of The Image Property as String
	 */	
	String getImageSizeAsString() {*
		return this.DImageSize;
	*}
	
	/**
	 * Sets Size Of The Image Property by Choice Option
	 */	
	void setImageSize( /**Size Of The Image*/ org_scn_community_shared_ImageSizeEnumfield imageSize){*
		this.DImageSize = imageSize;
	*}
	
	/**
	 * Gets Size Of The Image Property as Choice Option
	 */	
	org_scn_community_shared_ImageSizeEnumfield getImageSize() {*
		return this.DImageSize;
	*}

	/**
	 * Gets Technical Property For Pressed Button Key Property
	 */	
	String getPressedButtonKey() {*
		return this.DPressedButtonKey;
	*}

	/**
	 * Gets Technical Property For Pressed Item Key Property
	 */	
	String getPressedItemKey() {*
		return this.DPressedItemKey;
	*}

	/**
	 * Gets Technical Property For Selected Keys Property
	 */	
	String getSelectedKeys() {*
		return this.DSelectedKeys;
	*}

	/**
	 * Sets Selection Type Property by String
	 */	
	void setSelectionTypeByString( /**Selection Type*/ String selectionType){*
		this.DSelectionType = selectionType;
	*}

	/**
	 * Gets Selection Type Property as String
	 */	
	String getSelectionTypeAsString() {*
		return this.DSelectionType;
	*}
	
	/**
	 * Sets Selection Type Property by Choice Option
	 */	
	void setSelectionType( /**Selection Type*/ org_scn_community_shared_SelectionTypeEnumfield selectionType){*
		this.DSelectionType = selectionType;
	*}
	
	/**
	 * Gets Selection Type Property as Choice Option
	 */	
	org_scn_community_shared_SelectionTypeEnumfield getSelectionType() {*
		return this.DSelectionType;
	*}

	/**
	 * Sets Use Images Property
	 */	
	void setWithImages( /**Use Images*/ boolean withImages){*
		this.DWithImages = withImages;
	*}

	/**
	 * Gets Use Images Property
	 */	
	boolean isWithImages() {*
		return this.DWithImages;
	*}








	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Slider
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Slider extends org.scn.community.shared.Component {

	/**
	 * Sets Activate Live Change Event (prototype) Property
	 */	
	void setLiveChangeActive( /**Activate Live Change Event (prototype)*/ boolean liveChangeActive){*
		this.DLiveChangeActive = liveChangeActive;
	*}

	/**
	 * Gets Activate Live Change Event (prototype) Property
	 */	
	boolean isLiveChangeActive() {*
		return this.DLiveChangeActive;
	*}

	/**
	 * Sets First Value (Live) Property
	 */	
	void setLiveValue( /**First Value (Live)*/ float liveValue){*
		this.liveValue = liveValue;
	*}

	/**
	 * Gets First Value (Live) Property
	 */	
	float getLiveValue() {*
		return this.liveValue;
	*}

	/**
	 * Sets Maximum Value Property
	 */	
	void setMax( /**Maximum Value*/ float max){*
		this.max = max;
	*}

	/**
	 * Gets Maximum Value Property
	 */	
	float getMax() {*
		return this.max;
	*}

	/**
	 * Sets Minimum Value Property
	 */	
	void setMin( /**Minimum Value*/ float min){*
		this.min = min;
	*}

	/**
	 * Gets Minimum Value Property
	 */	
	float getMin() {*
		return this.min;
	*}





	/**
	 * Sets Small Step Width Property
	 */	
	void setSmallStepWidth( /**Small Step Width*/ float smallStepWidth){*
		this.smallStepWidth = smallStepWidth;
	*}

	/**
	 * Gets Small Step Width Property
	 */	
	float getSmallStepWidth() {*
		return this.smallStepWidth;
	*}

	/**
	 * Sets Step Labels Property
	 */	
	void setStepLabels( /**Step Labels*/ boolean stepLabels){*
		this.stepLabels = stepLabels;
	*}

	/**
	 * Gets Step Labels Property
	 */	
	boolean isStepLabels() {*
		return this.stepLabels;
	*}

	/**
	 * Sets Total Units Property
	 */	
	void setTotalUnits( /**Total Units*/ int totalUnits){*
		this.totalUnits = totalUnits;
	*}

	/**
	 * Gets Total Units Property
	 */	
	int getTotalUnits() {*
		return this.totalUnits;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ float value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	float getValue() {*
		return this.value;
	*}

	/**
	 * Sets Change To Vertical Orientation Property
	 */	
	void setVertical( /**Change To Vertical Orientation*/ boolean vertical){*
		this.vertical = vertical;
	*}

	/**
	 * Gets Change To Vertical Orientation Property
	 */	
	boolean isVertical() {*
		return this.vertical;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for TextArea
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.TextArea extends org.scn.community.shared.Component {

	/**
	 * Sets Editable Property
	 */	
	void setEditable( /**Editable*/ boolean editable){*
		this.editable = editable;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}

	/**
	 * Sets Maximal Length Property
	 */	
	void setMaxLength( /**Maximal Length*/ int maxLength){*
		this.maxLength = maxLength;
	*}

	/**
	 * Gets Maximal Length Property
	 */	
	int getMaxLength() {*
		return this.maxLength;
	*}



	/**
	 * Sets Rows Property
	 */	
	void setRows( /**Rows*/ int rows){*
		this.rows = rows;
	*}

	/**
	 * Gets Rows Property
	 */	
	int getRows() {*
		return this.rows;
	*}

	/**
	 * Sets Text Value Property
	 */	
	void setValue( /**Text Value*/ String value){*
		this.value = value;
	*}

	/**
	 * Gets Text Value Property
	 */	
	String getValue() {*
		return this.value;
	*}

	/**
	 * Sets Wrapping Property by String
	 */	
	void setWrappingByString( /**Wrapping*/ String wrapping){*
		this.wrapping = wrapping;
	*}

	/**
	 * Gets Wrapping Property as String
	 */	
	String getWrappingAsString() {*
		return this.wrapping;
	*}
	
	/**
	 * Sets Wrapping Property by Choice Option
	 */	
	void setWrapping( /**Wrapping*/ org_scn_community_shared_WrappingEnumfield wrapping){*
		this.wrapping = wrapping;
	*}
	
	/**
	 * Gets Wrapping Property as Choice Option
	 */	
	org_scn_community_shared_WrappingEnumfield getWrapping() {*
		return this.wrapping;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	/**
	 * Appends Text Value to the End
	 */	
	void appendValue( /**Text Value to Append*/ String value){*
		this.value = this.value + value;
	*}
}

/**
 * Generated ZTL Class for TimeOut
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.TimeOut extends org.scn.community.shared.Component {

	/**
	 * Sets Show Counter Property
	 */	
	void setCounterVisible( /**Show Counter*/ boolean counterVisible){*
		this.counterVisible = counterVisible;
	*}

	/**
	 * Gets Show Counter Property
	 */	
	boolean isCounterVisible() {*
		return this.counterVisible;
	*}



	/**
	 * Sets Logoff Popup Text Property
	 */	
	void setLogoffText( /**Logoff Popup Text*/ String logoffText){*
		this.logoffText = logoffText;
	*}

	/**
	 * Gets Logoff Popup Text Property
	 */	
	String getLogoffText() {*
		return this.logoffText;
	*}



	/**
	 * Sets Is periodic? Property
	 */	
	void setPeriodic( /**Is periodic?*/ boolean periodic){*
		this.periodic = periodic;
	*}

	/**
	 * Gets Is periodic? Property
	 */	
	boolean isPeriodic() {*
		return this.periodic;
	*}





	/**
	 * Sets Timeout after (ms) Property
	 */	
	void setTimer( /**Timeout after (ms)*/ int timer){*
		this.timer = timer;
	*}

	/**
	 * Gets Timeout after (ms) Property
	 */	
	int getTimer() {*
		return this.timer;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	void startTimer(){*
		this.start = calcTimestamp();
	*}
	
	void stopTimer(){*
		this.stop = calcTimestamp();
	*}
	
	void logoff(){*
		this.logoff = calcTimestamp();
	*}
	
	@Visibility(private)
	/**
	 *	Workaround for strange DesignStudio lifecycle handling when calling functions via scriptting triggers
	 */
	String calcTimestamp() {*
		return new Date().valueOf();
	*}
}

/**
 * Generated ZTL Class for ToggleButton
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ToggleButton extends org.scn.community.shared.Component {

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}

	/**
	 * Sets Icon Property
	 */	
	void setIcon( /**Icon*/ String icon){*
		this.icon = icon;
	*}

	/**
	 * Gets Icon Property
	 */	
	String getIcon() {*
		return this.icon;
	*}

	/**
	 * Sets Icon Hovered Property
	 */	
	void setIconHovered( /**Icon Hovered*/ String iconHovered){*
		this.iconHovered = iconHovered;
	*}

	/**
	 * Gets Icon Hovered Property
	 */	
	String getIconHovered() {*
		return this.iconHovered;
	*}

	/**
	 * Sets Icon Selected Property
	 */	
	void setIconSelected( /**Icon Selected*/ String iconSelected){*
		this.iconSelected = iconSelected;
	*}

	/**
	 * Gets Icon Selected Property
	 */	
	String getIconSelected() {*
		return this.iconSelected;
	*}



	/**
	 * Sets Pressed Property
	 */	
	void setPressed( /**Pressed*/ boolean pressed){*
		this.pressed = pressed;
	*}

	/**
	 * Gets Pressed Property
	 */	
	boolean isPressed() {*
		return this.pressed;
	*}

	/**
	 * Sets Text Value Property
	 */	
	void setText( /**Text Value*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Text Value Property
	 */	
	String getText() {*
		return this.text;
	*}

	/**
	 * Sets Tooltip Value Property
	 */	
	void setTooltip( /**Tooltip Value*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Value Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for Tree
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.Tree extends org.scn.community.shared.Component {

	/**
	 * Sets Allow Expanding Nodes Property
	 */	
	void setAllowExpanding( /**Allow Expanding Nodes*/ boolean allowExpanding){*
		this.allowExpanding = allowExpanding;
	*}

	/**
	 * Gets Allow Expanding Nodes Property
	 */	
	boolean isAllowExpanding() {*
		return this.allowExpanding;
	*}

	/**
	 * Clean All Nodes from the Array.
	 */	
	void cleanAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>cleanAllElements()</code>
	 */	
	@Visibility(deprecated)
	void removeAllElements (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/**
	 * Sets Url For Default Picture Property
	 */	
	void setDefaultImage( /**Url For Default Picture*/ String defaultImage){*
		this.defaultImage = defaultImage;
	*}

	/**
	 * Gets Url For Default Picture Property
	 */	
	String getDefaultImage() {*
		return this.defaultImage;
	*}

	/**
	 * Sets Expand Nodes Property
	 */	
	void setExpandNodes( /**Expand Nodes*/ boolean expandNodes){*
		this.expandNodes = expandNodes;
	*}

	/**
	 * Gets Expand Nodes Property
	 */	
	boolean isExpandNodes() {*
		return this.expandNodes;
	*}

	/**
	 * Gets Technical Proprty For Expanded Key Property
	 */	
	String getExpandedKey() {*
		return this.expandedKey;
	*}

	/** Adds an element containing parentKey [String], key [String], text [String], url [String] properties.
	 * You need to specify a unique and existing parent element.

 	<example>
	You want to add 2 elements
	<code>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);<br>
	TREE.addSubNode(parentKey [String], key [String], text [String], url [String]);
	</code>
	</example>
	 */
	void addSubNode (
			/**Parent Key*/String parentKey, 
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		var leaf = (parentKey != "ROOT");
		
		
		var itemDef = {
			leaf:leaf,
			parentKey:parentKey, 
			key:key, 
			text:text, 
			url:url 
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Adds a root element containing key [String], text [String], url [String].

 	<example>
	You want to add 2 root elements
	<code>
	TREE.addRootNode(key [String], text [String], url [String]);<br>
	TREE.addRootNode(key [String], text [String], url [String]);<br>
	<br>
	</code>
	</example>
	 */
	void addRootNode (
			/**Unique Key*/String key, 
			/**Given Text*/String text, 
			/**Given Url*/String url
			) {*		
		
		this.addSubNode("ROOT", key, 
			text, 
			url);
	*}
	
	/** removes an element by String key properties.
	 * You need to specify a unique and existing key.

 	<example>
	You want to remove element
	<code>
	TREE.removeSubNode(String key);<br>
	</code>
	</example>
	 */
	void removeSubNode (
			String key
			) {*		
		
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	TREE.removeRootNode(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeRootNode (
			String key
			) {*		
		
		this.removeSubNode(key);
	*}

	/**
	 * Gets RootNodes As JSON String
	 */	
	String getRootNodesAsJSON() {*
		var jsonObject = JSON.parse(this.nodesContent);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All RootNodes
	 */	
	String cleanAllRootNodes() {*
		this.nodesContent = "[]";
	*}
	/**
	 * Sets the Text for RootNode keys<br/>
	 */
	void setRootNodeTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for RootNode Key<br/>
	 */
	void setRootNodeText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for RootNode Key<br/>
	 */
	String getRootNodeText (
			/**/ String key
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for RootNode keys<br/>
	 */
	void setRootNodeUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for RootNode Key<br/>
	 */
	void setRootNodeUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for RootNode Key<br/>
	 */
	String getRootNodeUrl (
			/**/ String key
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Text for SubNode keys<br/>
	 */
	void setSubNodeTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for SubNode Key<br/>
	 */
	void setSubNodeText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for SubNode Key<br/>
	 */
	String getSubNodeText (
			/**/ String key
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Url for SubNode keys<br/>
	 */
	void setSubNodeUrls (
			/**/ String keys,
			/**/ String separator,
	        /* Url */ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].url = url;
					break;
				}
			}
		}
		
		this.nodesContent = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Url for SubNode Key<br/>
	 */
	void setSubNodeUrl (
			/**/ String key,
			/**/ String url
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].url = url;
				break;
			}
		}

		this.nodesContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Url for SubNode Key<br/>
	 */
	String getSubNodeUrl (
			/**/ String key
			) 
	{*
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.nodesContent);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].url;
				break;
			}
		}
		
		return value;
	*}








	/**
	 * Gets Technical Proprty For Selected Key Property
	 */	
	String getSelectedKey() {*
		return this.selectedKey;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions

	/**
	 * Remove All Nodes from the Array.
	 * You can use also <code>removeAllNodes()</code>
	 */	
	@Visibility(deprecated)
	void removeAllNodes (){*
		this.cleanAll = true;

		var elementsArray = [];
		this.nodesContent = JSON.stringify(elementsArray);
	*}

	/** informs the UI that there is no note update (no children under given expanded key) */
	void noNodeUpdate () {*
		this.roundtrip = this.roundtrip + 1;
	*}
	
	/** Adds a tree node containing Key, Text, Image Url, Parent Node and is Leaf information.
	 * You need to specify a unique and existing parent node.
	 * if Parent is set to "ROOT" then the node will be inserted into "ROOT". 

 	<example>
	You want to add 2 nodes, second one is a child of fist one
	<code>
	TREE_1.addNode("KEY1", "First Node", "", "ROOT", true);<br>
	TREE_1.addNode("KEY2", "First Node", "", "KEY1", true);<br>
	<br>
	</code>
	</example>
	 */
	@Visibility(deprecated)
	void addNode (
			/**Node Key (must be unique)*/String nodeKey, 
			/**Node text*/String nodeText, 
			/**Image URL, if not set, no image*/String imageUrl, 
			/**The Key of the parent Node*/String parentNodeKey, 
			/**Leafs do not have expand option by default*/optional boolean isLeaf) {*		
		
		if(isLeaf == undefined) {
			isLeaf = true;
		}
		
		var itemDef = { 
			"key": nodeKey, 
			"text": nodeText, 
			"url": imageUrl,
			"parentKey": parentNodeKey,
			"leaf": isLeaf
			};
	
		if (this.nodesContent === undefined || this.nodesContent === "" || this.nodesContent === "<delete>"){
			this.nodesContent = "[]";
		}
		
		var nodesJson = JSON.parse(this.nodesContent);
		
		var alreadyFound = false;
		for (var i = 0; i < nodesJson.length ; i++){
			if (nodesJson[i].key == nodeKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			nodesJson.push(itemDef);
		}
	
		this.nodesContent = JSON.stringify(nodesJson);
	*}

}

/**
 * Generated ZTL Class for TriStateCheckBox
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.TriStateCheckBox extends org.scn.community.shared.Component {

	/**
	 * Sets Editable Property
	 */	
	void setEditable( /**Editable*/ boolean editable){*
		this.editable = editable;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}



	/**
	 * Sets Tooltip Property by String
	 */	
	void setSelectionStateByString( /**Tooltip*/ String selectionState){*
		this.selectionState = selectionState;
	*}

	/**
	 * Gets Tooltip Property as String
	 */	
	String getSelectionStateAsString() {*
		return this.selectionState;
	*}
	
	/**
	 * Sets Tooltip Property by Choice Option
	 */	
	void setSelectionState( /**Tooltip*/ org_scn_community_shared_SelectionsStateEnumfield selectionState){*
		this.selectionState = selectionState;
	*}
	
	/**
	 * Gets Tooltip Property as Choice Option
	 */	
	org_scn_community_shared_SelectionsStateEnumfield getSelectionState() {*
		return this.selectionState;
	*}

	/**
	 * Sets Value Property
	 */	
	void setText( /**Value*/ String text){*
		this.text = text;
	*}

	/**
	 * Gets Value Property
	 */	
	String getText() {*
		return this.text;
	*}

	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ValiInput
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ValiInput extends org.scn.community.shared.Component {

	/**
	 * Sets Default Value Property
	 */	
	void setDefault( /**Default Value*/ String default){*
		this.DDefault = default;
	*}

	/**
	 * Gets Default Value Property
	 */	
	String getDefault() {*
		return this.DDefault;
	*}

	/**
	 * Sets Length Property
	 */	
	void setLength( /**Length*/ int length){*
		this.DLength = length;
	*}

	/**
	 * Gets Length Property
	 */	
	int getLength() {*
		return this.DLength;
	*}

	/**
	 * Sets Number Property
	 */	
	void setNumber( /**Number*/ float number){*
		this.DNumber = number;
	*}

	/**
	 * Gets Number Property
	 */	
	float getNumber() {*
		return this.DNumber;
	*}

	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.DTooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.DTooltip;
	*}

	/**
	 * Sets Valid State (for Custom) Property by String
	 */	
	void setValidStateByString( /**Valid State (for Custom)*/ String validState){*
		this.DValidState = validState;
	*}

	/**
	 * Gets Valid State (for Custom) Property as String
	 */	
	String getValidStateAsString() {*
		return this.DValidState;
	*}
	
	/**
	 * Sets Valid State (for Custom) Property by Choice Option
	 */	
	void setValidState( /**Valid State (for Custom)*/ org_scn_community_shared_ValidationStateEnumfield validState){*
		this.DValidState = validState;
	*}
	
	/**
	 * Gets Valid State (for Custom) Property as Choice Option
	 */	
	org_scn_community_shared_ValidationStateEnumfield getValidState() {*
		return this.DValidState;
	*}

	/**
	 * Sets Validation Type Property by String
	 */	
	void setValidationByString( /**Validation Type*/ String validation){*
		this.DValidation = validation;
	*}

	/**
	 * Gets Validation Type Property as String
	 */	
	String getValidationAsString() {*
		return this.DValidation;
	*}
	
	/**
	 * Sets Validation Type Property by Choice Option
	 */	
	void setValidation( /**Validation Type*/ org_scn_community_shared_Enumfield validation){*
		this.DValidation = validation;
	*}
	
	/**
	 * Gets Validation Type Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getValidation() {*
		return this.DValidation;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ String value){*
		this.DValue = value;
	*}

	/**
	 * Gets Value Property
	 */	
	String getValue() {*
		return this.DValue;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for ValueHelpField
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.ValueHelpField extends org.scn.community.shared.Component {

	/**
	 * Sets Editable Property
	 */	
	void setEditable( /**Editable*/ boolean editable){*
		this.editable = editable;
	*}

	/**
	 * Gets Editable Property
	 */	
	boolean isEditable() {*
		return this.editable;
	*}

	/**
	 * Sets Enabled Property
	 */	
	void setEnabled( /**Enabled*/ boolean enabled){*
		this.enabled = enabled;
	*}

	/**
	 * Gets Enabled Property
	 */	
	boolean isEnabled() {*
		return this.enabled;
	*}





	/**
	 * Sets Tooltip Property
	 */	
	void setTooltip( /**Tooltip*/ String tooltip){*
		this.tooltip = tooltip;
	*}

	/**
	 * Gets Tooltip Property
	 */	
	String getTooltip() {*
		return this.tooltip;
	*}

	/**
	 * Sets Value Property
	 */	
	void setValue( /**Value*/ String value){*
		this.value = value;
	*}

	/**
	 * Gets Value Property
	 */	
	String getValue() {*
		return this.value;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}

/**
 * Generated ZTL Class for WorldTime
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.basics.WorldTime extends org.scn.community.shared.Component {

	/**
	 * Sets Date Format Property by String
	 */	
	void setDateformatByString( /**Date Format*/ String dateformat){*
		this.dateformat = dateformat;
	*}

	/**
	 * Gets Date Format Property as String
	 */	
	String getDateformatAsString() {*
		return this.dateformat;
	*}
	
	/**
	 * Sets Date Format Property by Choice Option
	 */	
	void setDateformat( /**Date Format*/ org_scn_community_shared_Enumfield dateformat){*
		this.dateformat = dateformat;
	*}
	
	/**
	 * Gets Date Format Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getDateformat() {*
		return this.dateformat;
	*}

	/**
	 * Sets Consider Daylight Saving Property
	 */	
	void setDaylightsaving( /**Consider Daylight Saving*/ boolean daylightsaving){*
		this.daylightsaving = daylightsaving;
	*}

	/**
	 * Gets Consider Daylight Saving Property
	 */	
	boolean isDaylightsaving() {*
		return this.daylightsaving;
	*}

	/**
	 * Sets Update Interval (in Ms) Property
	 */	
	void setInterval( /**Update Interval (in Ms)*/ int interval){*
		this.interval = interval;
	*}

	/**
	 * Gets Update Interval (in Ms) Property
	 */	
	int getInterval() {*
		return this.interval;
	*}

	/**
	 * Sets Locale Property by String
	 */	
	void setLocaleByString( /**Locale*/ String locale){*
		this.locale = locale;
	*}

	/**
	 * Gets Locale Property as String
	 */	
	String getLocaleAsString() {*
		return this.locale;
	*}
	
	/**
	 * Sets Locale Property by Choice Option
	 */	
	void setLocale( /**Locale*/ org_scn_community_shared_Enumfield locale){*
		this.locale = locale;
	*}
	
	/**
	 * Gets Locale Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getLocale() {*
		return this.locale;
	*}

	/**
	 * Sets Show Timezone Name Property
	 */	
	void setShowtimezonename( /**Show Timezone Name*/ boolean showtimezonename){*
		this.showtimezonename = showtimezonename;
	*}

	/**
	 * Gets Show Timezone Name Property
	 */	
	boolean isShowtimezonename() {*
		return this.showtimezonename;
	*}

	/**
	 * Sets Time Format Property by String
	 */	
	void setTimeformatByString( /**Time Format*/ String timeformat){*
		this.timeformat = timeformat;
	*}

	/**
	 * Gets Time Format Property as String
	 */	
	String getTimeformatAsString() {*
		return this.timeformat;
	*}
	
	/**
	 * Sets Time Format Property by Choice Option
	 */	
	void setTimeformat( /**Time Format*/ org_scn_community_shared_Enumfield timeformat){*
		this.timeformat = timeformat;
	*}
	
	/**
	 * Gets Time Format Property as Choice Option
	 */	
	org_scn_community_shared_Enumfield getTimeformat() {*
		return this.timeformat;
	*}

	/**
	 * Sets UTC Offset Property
	 */	
	void setUtcoffset( /**UTC Offset*/ String utcoffset){*
		this.utcoffset = utcoffset;
	*}

	/**
	 * Gets UTC Offset Property
	 */	
	String getUtcoffset() {*
		return this.utcoffset;
	*}


	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */

}
/* ZTL END */